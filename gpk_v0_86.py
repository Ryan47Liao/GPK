# -*- coding: utf-8 -*-
"""GPK_v0.86

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ZmjkBGYeefPAI5O6o3P0dt1YhSF_2ox

# Library
"""

import numpy as np
from IPython.display import clear_output
import random
from math import sqrt
from collections import namedtuple
import pickle
import smtplib
import matplotlib.pyplot as plt
import matplotlib.image as img
from math import *
from time import sleep
import datetime 
import calendar 
import email
import imaplib
import docx
from tqdm import tqdm_notebook

"""# Pictures"""

#@title #menu pictures {display-mode: "form"}
menu_welcome_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_Welcome.png")
goodbye_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_goodbye.png")
welcome_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/OKR_Menu.png")
welldone_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_welldone.png")
checked_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_green_check.png")
awesome_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_awesome.jpg")

#@title #Store Pictures: Prize {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

def img_print(img_b):
    plt.imshow(img_b)
    plt.axis('off')
    plt.show()
    
#Store Pictures: Prize
Prize = {"P1":img.imread ("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P1.png"),
         "P2":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P2.png"),
         "P3":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P3.png"),
         "P4":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P4.png"),
         "P5":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/better_luck.png")}
def img_Prize(n):
  Rank = "P"+str(n)
  img_print(Prize[Rank])

#@title Pictures: Cascino {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

#Store Pictures: Dice_Faces
diceFaces=[img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/U%2B2680.svg/200px-U%2B2680.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/U%2B2681.svg/200px-U%2B2681.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/U%2B2682.svg/200px-U%2B2682.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/U%2B2683.svg/200px-U%2B2683.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/U%2B2684.svg/200px-U%2B2684.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/U%2B2685.svg/200px-U%2B2685.svg.png")]

Win_Lose = {"Win":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_Win.png"),
        "Lose":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_Lose.png")}
Gamble_entry_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_Gamble_Entry.png")
BlackJack = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_BJ.jpg")

"""# RSA Encryption System"""

#@title Fundamental Module of RSA system {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

def Ecp(L):
    DICT = {"a":"01","b":"02","c":"03","d":"04","e":"05","f":"06","g":"07","h":"08","i":"09","j":"10","k":"11",
      "l":"12","m":"13","n":"14","o":"15","p":"16","q":"17","r":"18","s":"19","t":"20","u":"21","v":"22",
       "w":"23","x":"24","y":"25","z":"26"," ":"27",",":"28","!":"29",".":"30","?":"31",":":"32"}
    if L.isupper():
        L = str.lower(L)
    return DICT[str(L)]
    
#
def Decp(L):
    DICT = {"a":"01","b":"02","c":"03","d":"04","e":"05","f":"06","g":"07","h":"08","i":"09","j":"10","k":"11",
      "l":"12","m":"13","n":"14","o":"15","p":"16","q":"17","r":"18","s":"19","t":"20","u":"21","v":"22",
       "w":"23","x":"24","y":"25","z":"26"," ":"27",",":"28","!":"29",".":"30","?":"31",":":"32"}
    Items = list(DICT.items())
    for i in range(len(Items)):
        if str(L) == Items[i][1]:
            return Items[i][0]
    return(str.lower(random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ")))
#
def Encrptor(string):
    code = []
    for i in range(len(string)):
        code = np.append(code,Ecp(string[i]))
    return(code)

def Decrptor(string):
    message = []
    for i in range(len(string)):
        message = np.append(message,Decp(string[i]))
    return(message)   
#
def Concat (arr):
    output = "1"
    for i in range(len(arr)): 
        output = output + arr[i]
    return(int(output[1::]))

def translate(num):
    arr = []
    NUM = str((num))
    if len(NUM)%2 != 0:
        NUM = "0"+NUM
    N = int(len(NUM)/2)
    for i in range(N):
        arr = np.append(arr,NUM[2*i:2*i+2])
    return(arr)

def read(num_string):
    arr = translate(num_string)
    arr = Decrptor(arr)
    output = "~"
    for i in range(len(arr)): 
        output =  output + arr[i]
    return(str.capitalize(output[1::]))

def encode(plaintext):
    plaintext  = Encrptor(plaintext)
    return(Concat(plaintext))

#Credit to: https://medium.com/@prudywsh/how-to-generate-big-prime-numbers-miller-rabin-49e6e6af32fb
from random import randrange, getrandbits
def is_prime(n, k=128):
    """ Test if a number is prime
        Args:
            n -- int -- the number to test
            k -- int -- the number of tests to do
        return True if n is prime
    """
    # Test if n is not even.
    # But care, 2 is prime !
    if n == 2 or n == 3:
        return True
    if n <= 1 or n % 2 == 0:
        return False
    # find r and s
    s = 0
    r = n - 1
    while r & 1 == 0:
        s += 1
        r //= 2
    # do k tests
    for _ in range(k):
        a = randrange(2, n - 1)
        x = mod(a,r,n)
        if x != 1 and x != n - 1:
            j = 1
            while j < s and x != n - 1:
                x = mod(x, 2, n)
                if x == 1:
                    return False
                j += 1
            if x != n - 1:
                return False
    return True

# Module1: Prime Generator 
def isprime(N):
    if N % 2 == 0:
        return False
    for x in range(3,int(sqrt(N))+1,2):
        if N % x == 0:
            return False 
    return True

def num_gen(n):
    output = "0"
    num = np.random.randint(10, size=(1, n))
    num = num[0]
    for i in range(len(num)):
        output = output + str(num[i])
    output = output[1::]
    if output[0]== "0":
        output = str(np.random.randint(1,10))+output[1::]
    return(int(output)) 

def prime_gen(n):
    p = 4
    while 1*(is_prime(p))==0: 
        p = num_gen(n)
    return(p)    
    
#Gcd Module
def GCD(a,b):
    if a < b:
        temp_b = a
        temp_a = b
        a = temp_a 
        b = temp_b
    if a % b == 0:
        return(b)
    else: 
        return(GCD(b,a % b))
    
# Python program to demonstrate working of extended  
# Euclidean Algorithm  
     
# function for extended Euclidean Algorithm  
def gcdExtended(a, b):  
    # Base Case  
    if a == 0 :   
        return b, 0, 1
                 
    gcd, x1, y1 = gcdExtended(b%a, a)  
     
    # Update x and y using results of recursive  
    # call  
    x = y1 - (b//a) * x1  
    y = x1  
    return gcd, x, y 

# mod calculates (x**y%n)
def mod(x,y,n):
    p = 1
    s = x
    r = y
    while r > 0:
        if r % 2 == 1:
            p = p*s % n
        s = s*s % n 
        r = r // 2 
    return(p)

#RSA Module 
def get_e(n):
    for i in range(int(n)):
        i = i + 2
        if GCD(i,n)==1:
            return(i)
        
def get_mul_inv(e,phi):
    gcd, x, y = gcdExtended(e,phi)
    return(x%phi)

def RSA_sys(n):
    print("Generating Public Keys and Private Keys")
    #finds p,q that are two prime numbers with many digits 
    p = prime_gen(n)
    q = prime_gen(n)
    #Generate Public_key_1:N
    N = p*q
    phi = (p-1)*(q-1)
    #Generate Public_key_2:e
    e = get_e(phi)
    #Generate Private_key:d
    d = get_mul_inv(e,phi)
    return N,e,d

def ENC(message,N,e):
    m = encode(message)
    C = mod(encode(message),e,N)
    return(C)

def DEC(C,N,d):
    m = mod(C,d,N)
    return(read(m))

"""# GPK_Shell"""

#@title The shell that prompts login interface {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

def GPK():
    try:
        #INITIALIZATION
        STATUS = "Y"
        # Load Account Book 
        INfile = open("/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_accounts","rb")
        account_book = pickle.load(INfile)
        INfile.close()
        # Load GPK_update_log:
        INfile = open("/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_UpdateLog","rb")
        GPK_UpdateLog = pickle.load(INfile)
        INfile.close()
        # Black_List initialization
        Black_list = []
        for i in list(account_book.items()):
            if i[1]["acc_status"] == 0:
                Black_list.append(i[0])

        #INITIALIZATION COMPLETE
        system_welcome(GPK_UpdateLog) #Print Welcome Message
    except FileNotFoundError: 
        print("Initialization failed. Account book or Update log failed to load.")
        return()

    while True: 
        cmd = str(input("Please enter command:\n"))
        if cmd == "Exit":
            print("*"*30)
            print("***Program Closed, goodbye~***")
            print("*"*30)
            return
            
        elif cmd == "Admin":
            admin_PW = str(input("please enter your adminitrator pass word:\n"))
            if admin_PW == "13705165727":
                star_print("Welcome! Administrator!")
                cmd = input("please enter your admin command:\n")
                if cmd == "showmethemoney":
                  AC = input("who?")
                  N = account_book[AC]["N"]
                  e = account_book[AC]["e"]
                  d = account_book[AC]["d"]
                  account_enc = str(mod(int(AC),e,N))
                  account_book[account_enc]["balance"] += 666
                  img_print(img.imread("/content/drive/My Drive/GPK_pics/Menu/GPK_showmethemoney.png"))
                if cmd == "RetrievePassword":
                    AC = str(input("please enter your account of which you wish to retrive:"))
                    d = file[AC]["d"]
                    N = file[AC]["N"]
                    PW = mod(account_book[AC]["PW"],K.d,K.N)
                    print("The pass word is",PW)
                if cmd == "BlackList":
                    print(Black_list)
                    Q = input("Would you like to unlock specific accounts?(Y or N)")
                    while Q == "Y":
                        AC_unlock = input("Please enter the account you wish to unlock:")
                        Black_list.remove(AC_unlock)
                        file[AC_unlock]["acc_status"] = (1)
                        print("Account {} succesfully unlocked".format(AC_unlock))
                        Q = input("Would you like to continue?(Y or N)")
                if cmd == "Log":
                    from datetime import date
                    date_today = str(date.today())
                    if str(date_today) not in GPK_UpdateLog:
                        GPK_UpdateLog[str(date_today)] = dict()
                    version = input("Version:\n")
                    entry = input("Update Log\n")
                    if version in GPK_UpdateLog[str(date_today)]:
                        GPK_UpdateLog[str(date_today)][version] = GPK_UpdateLog[str(date_today)][version] + ("\n" + entry + "\n")
                    else:  
                        GPK_UpdateLog[str(date_today)][version] = entry + "\n" 
                    log_path = "/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_UpdateLog"
                    OUTfile = open(log_path,"wb")
                    pickle.dump(GPK_UpdateLog,OUTfile)
                    OUTfile.close()
                    
                    
        elif cmd == "SignUp":
            N,e,d = RSA_sys(200)
            account = input("please enter your account:\n")
            if account in account_book:
                print("Account already exist, enter 'LogIn' to login to your account.")
                continue
                
            password = int(input("please enter your pin:\n"))
            keys = {"N":N,"e":e,"d":d}
            name = str(input("please enter your name:\n"))
            gender = str(input("please enter your gender:\n"))
            mail_address = input("To automates with other applications, please enter an email address of yours.\n")
            mail_password = input("We also need your password of your email address.\n")
            mail_info = {"mail_address":mail_address,"mail_password":mail_password}
            account_book[account] = {"PW":mod(password,e,N),"N":N,"e":e,"d":d,"name":ENC(name,N,e),
                             "gender":ENC(gender,N,e),"acc_status":1,"mail_info":mail_info}
            file = dict()
            account_enc = str(mod(int(account),e,N))
            OUTfile = open(account_enc,"wb")
            pickle.dump(file,OUTfile)
            OUTfile.close()
            save_path = "/content/drive/Shared drives/GPK_OKR/GPK_Saves/"
            OUTfile = open(save_path + account_enc,"wb")
            pickle.dump(file,OUTfile)
            OUTfile.close()
            print("Account generated and saved.")

        elif cmd == "GPKLOG":
            for date in GPK_UpdateLog:
                print(date)
                for version in GPK_UpdateLog[date]:
                    print("  ",version)
                    log = str(GPK_UpdateLog[date][version])
                    for i in log.split("\\n"):
                        print(i)
                
        elif cmd == "LogIn":
            AC = input("please enter your account:\n")
            if AC in Black_list:
                print("Account Locked for too many wrong trials.Contact administrator to unlock the account")
                OUTfile = open(account_book,"wb")
                pickle.dump(account_book,OUTfile)
                OUTfile.close()
                return
            if AC not in account_book:
              print("Such Account Does not Exit")
              continue
            trys = 3
            N = account_book[AC]["N"]
            e = account_book[AC]["e"]
            d = account_book[AC]["d"]
            while trys > 0:
                trys -= 1
                PW = int(input("please enter pass word:\n"))
                if account_book[AC]["PW"] == mod(PW,e,N):
                    trys = -1
                    first_entry = "Y"
                    account_enc = str(mod(int(AC),e,N))
                    acc_file_path = "/content/drive/Shared drives/GPK_OKR/GPK_Saves/"+account_enc
                    INfile = open(acc_file_path,"rb")
                    acc_data = pickle.load(INfile)
                    INfile.close()
                    while True:
                        if first_entry == "Y":
                            for i in range(10):
                              clear_output(wait=True)
                            img_print(menu_welcome_img)
                            star_print("hello,{},welcome back!".format(DEC(account_book[AC]["name"],N,d)))
                            first_entry = "N"
                        star_print("hit 'ENTER' to summon user Menu")
                        cmd = input("Dear user, please enter new commands:\n")
                        if cmd == "":
                            print("User Menu:\n"
                                  "Enter 'Name' to change name.\n"
                                  "Enter 'Save' to save data. \n"
                                  "Enter 'LogOut' to return to the main menu. \n"
                                  "Enter 'OKR' to Access OKR system \n")
                        if cmd == "Name":
                            name = input("Please enter your new name\n")
                            account_book[AC]["name"] = ENC(name,N,e)
                        if cmd == "OKR":
                          img_print(welcome_img)
                          account_book[AC]["OKR"] = OKR_system_user(acc_data,account_book[AC]["mail_info"])
                        if cmd == "Save":
                          OUTfile = open(acc_file_path,"wb")
                          pickle.dump(acc_data,OUTfile)
                          OUTfile.close()
                          img_print(checked_img)
                          print("File Succesfully Saved")
                        if cmd == "LogOut":
                            OUTfile = open(acc_file_path,"wb")
                            pickle.dump(acc_data,OUTfile)
                            OUTfile.close()
                            for i in range(10):
                              clear_output(wait=True)
                            print("File saved, account logged out...")
                            img_print(goodbye_img)
                            break
                else:
                    print("Wrong Password,%d trys left"%trys)
                    if trys == 0:
                        print("!!!Access Denied!!!")
                        Black_list.append(AC)
                        account_book[AC]["acc_status"] = 0
                        acc_book_file_path = "/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_accounts"
                        OUTfile = open(acc_book_file_path,"wb")
                        pickle.dump(account_book,OUTfile)
                        OUTfile.close()
                        return
        else:
            print("Menu:\n"
                  "Enter 'SignUp' to sign up for a new account.\n"
                  "Enter 'LogIn' to Login your account.\n"
                  "Enter 'GPKLOG' to show the update logs \n "
                  "Enter 'Exit' to terminate the program and autosave the file.\n")
        star_print("Welcome to the USER menu, hit 'ENTER' to summon the main menu")

#@title Extra Shell Mods {display-mode: "form"}
def star_print(word):
  word = "*"*3 + str(word) + "*"*3
  print("*"*len(word))
  print(word)
  print("*"*len(word))

def system_welcome(GPK_UpdateLog):
    #Finds the last date updated
    last_date = '1999-05-25'
    from datetime import datetime
    for date_time_str in GPK_UpdateLog: 
        if datetime.strptime(date_time_str, '%Y-%m-%d') > datetime.strptime(last_date, '%Y-%m-%d'):
            last_date = date_time_str
    #Finds the last Version updated
    latest_version = 0;
    for versions in GPK_UpdateLog[last_date]:
        version = float(versions[1:len(versions)])
        if version > latest_version:
            latest_version = version
    latest_version = "V"+ str(latest_version)

    print("*******Initialization complete*******\n"
        "WELCOME to the Grand Peach King {}!\n"
        "Update Date: {}".format(latest_version,last_date))
    print("*"*37)
    last_update = GPK_UpdateLog[last_date][latest_version]
    print("What's New:")
    for i in last_update.split("\n"):
        print(i)

"""# OKR_system"""

#@title OKR system that manages tasks {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def OKR_system_user(data,mail_info):
    from datetime import date
    if data == {}:
        data = {"TaskToday":{"Date":str(date.today()),"RecursiveTasks":{},"SpecialTasks":{}},"RecursiveBank":{},
                "OKRLOG_unfinished":{},"OKRLOG":{str(date.today()):{}},"balance":0,"Store":{},"MTK":{},"Loaded_log" : [] }        
    star_print("Welcome to OKR system!")
    if data["Store"] == {}:
        print("Dear user, to make the most out of GPK motivation system, please answer the following questions carefully")
        p1_content = input("Think of the most Exciting reward that you would like to have, what would it be?\n")
        n_p1 = int(input("How often think it is reasonable to receive such an exciting reward?\n e.g: if I wish to go to DisneyLand every 90 days, ENTER '90' \n"))
        p2_content = input("Tell me about a reward you would like to have, that you think you would not be happy without it\n")
        n_p2 = int(input("How often think it is reasonable to receive such an exciting reward?\n e.g: if I wish to go to DisneyLand every 90 days, ENTER '90' \n"))
        p3_content = input("Is there anything that you wish to do but finds too little time doing it?\n")
        n_p3 = int(input("How often think it is reasonable to receive such an reward?\n e.g: if I wish to go to DisneyLand every 90 days, ENTER '90' \n"))
        p4_content = input("Let me know how would you like to give yourself a treat on a daily basis?\n")
        n_p4 = int(input("How often think it is reasonable to receive such an reward?\n e.g: if I wish to go to DisneyLand every 90 days, ENTER '90' \n"))
        data["Store"] = {"p1":[n_p1,p1_content],"p2":[n_p2,p2_content],"p3":[n_p3,p3_content],"p4":[n_p4,p4_content]}
    #Initialize
    date_today = str(date.today())
    week_day = str(weekday_today())
    if "Loaded" not in list(data.keys()):
        data["Loaded"] = dict()
    if data["TaskToday"]["Date"] != date_today:
        if data["Loaded"] == []:
            try:
                print("Updating Today's Tasks...")
                data["OKRLOG"][date_today] = {}
                data["OKRLOG_unfinished"][date_today] = dict()
                data["OKRLOG_unfinished"][date_today].update(data["TaskToday"])
                data["TaskToday"]["RecursiveTasks"].update(data["RecursiveBank"][week_day])
                data["TaskToday"]["Date"] = date_today
                img_print(checked_img)
                print("Today's Task Updated")
            except: 
                print("Unable to update today's task")
        if data["Loaded"] != [] : 
            try: 
                if True: #Load Recursive Tasks
                    pre_assigned_day = data["Loaded"][weekday_today()-1]
                    for okr in pre_assigned_day.Recursive_Task:
                        for ks in okr.KeyResults:
                            ID = "R-" + okr.Objective.split(":")[0] + "-" + ks
                            if ID in data["TaskToday"]["RecursiveTasks"].keys():
                                continue
                            data["TaskToday"]["RecursiveTasks"][ID] = dict()
                            task_name = okr.KeyResults[ks][0]
                            task_difficulty = okr.KeyResults[ks][1].difficulty
                            task_time = okr.KeyResults[ks][1].time
                            task_description = None
                            Reward = okr.KeyResults[ks][1].reward
                            data["TaskToday"]["RecursiveTasks"][ID]["Reward"] =  float(Reward)
                            data["TaskToday"]["RecursiveTasks"][ID]["task_name"] =  task_name
                            data["TaskToday"]["RecursiveTasks"][ID]["task_difficulty"] =  float(task_difficulty)
                            data["TaskToday"]["RecursiveTasks"][ID]["task_time"] =  float(task_time)
                            data["TaskToday"]["RecursiveTasks"][ID]["task_description"] =  task_description
                    
                    #Load Special Tasks & Priority Task:
                    for okr in pre_assigned_day.Special_Task + pre_assigned_day.Priority_Task:
                        for ks in okr.KeyResults:
                            ID = "S-" + okr.Objective.split(":")[0] + "-" +ks
                            data["TaskToday"]["SpecialTasks"][ID] = dict()
                            task_name = okr.KeyResults[ks][0]
                            task_difficulty = okr.KeyResults[ks][1].difficulty
                            task_time = okr.KeyResults[ks][1].time
                            task_description = None
                            Reward = okr.KeyResults[ks][1].reward
                            data["TaskToday"]["SpecialTasks"][ID]["Reward"] =  float(Reward)
                            data["TaskToday"]["SpecialTasks"][ID]["task_name"] =  task_name
                            data["TaskToday"]["SpecialTasks"][ID]["task_difficulty"] =  float(task_difficulty)
                            data["TaskToday"]["SpecialTasks"][ID]["task_time"] =  float(task_time)
                            data["TaskToday"]["SpecialTasks"][ID]["task_description"] =  task_description
                            #Sync W/MeisterTask
                            try:
                                gmail_user = mail_info["mail_address"]
                                gmail_password = mail_info["mail_password"]
                                Receipeints_list = [data["MTK"]["S_address"]]
                                body = "ID:{}\n\nInfo:{}".format(ID,str(data["TaskToday"]["SpecialTasks"][ID]))
                                task_name = data["TaskToday"]["SpecialTasks"][ID]["task_name"]
                                msg = Msg_Editor(task_name,body)
                                Mail_Send(gmail_user,gmail_password,Receipeints_list,msg)
                                
                                print("-Special Tasks Synchronized-")
                            except:
                                print("Unable to Sync with MeisterTask")

                    data["OKRLOG_unfinished"][date_today] = dict()
                    data["OKRLOG_unfinished"][date_today].update(data["TaskToday"])
                    data["OKRLOG"][date_today] = dict()
                    data["TaskToday"]["Date"] = date_today
                    print("Today's Date:{}".format(date_today))
                    img_print(checked_img)
                    print("Today's Task Loaded")
            except:
                print("Fail to load from weekly logs")
            
        

    Q = input("Would You like to see today's briefing?('Y' or 'N')\n")
    if Q == "Y":
        print("Your Balance is:",data["balance"])
        print("Today's Tasks are:")
        sum_time = 0
        sum_reward = 0
        print("***Special Tasks***:")
        for i in data["TaskToday"]["SpecialTasks"]:
            print("**Task ID**:",i)
            print(data["TaskToday"]["SpecialTasks"][i])
            sum_time += data["TaskToday"]["SpecialTasks"][i]["task_time"]
            sum_reward += data["TaskToday"]["SpecialTasks"][i]["Reward"]
        print("***Recursive Tasks***:")
        for i in data["TaskToday"]["RecursiveTasks"]:
            print("**Task ID**:",i)
            print(data["TaskToday"]["RecursiveTasks"][i])
            sum_time += float(data["TaskToday"]["RecursiveTasks"][i]["task_time"])
            sum_reward += float(data["TaskToday"]["RecursiveTasks"][i]["Reward"])
                    
        print("\n***Summary***")
        print("Rewards Left:$",sum_reward)
        print("Sum task time:{}hours".format(sum_time))

    # Main Functions:        
    while True:
        star_print("Hit 'ENTER' to summon the OKR_Main Menu")
        cmd = input("Please enter OKR commands:\n")
        if cmd == "":
          print("***OKR_Main Menu:***\n"
             "Enter 'TaskToday' to configure today's tasks\n"
             "Enter 'RecursiveBank' to configure Recursive Tasks\n"
             "Enter 'Store' to enter the store\n"
             "Enter 'MTK' to configure MeisterTask Synchronizations \n"
             "Enter 'Archive' to load the Archives \n"
             "Enter 'Stats' to see the analysis of the productivity\n"
             "Enter 'Return' to RETURN to the GPK Main Menu\n")
        
        if cmd == "Sync":
            Task_finished = Done_today(mail_info["mail_address"],mail_info["mail_password"])
            IDs = []
            for task_name in Task_finished:
                for task_type in ["RecursiveTasks","SpecialTasks"]:
                    for ID in data["TaskToday"][task_type]:
                        if data["TaskToday"][task_type][ID]["task_name"].strip() == task_name:
                            IDs.append(ID)
            for ID in IDs:
                        Category = ID[0]
                        if Category == "S":
                            if ID not in data["TaskToday"]["SpecialTasks"]:
                                print("Error,There is no task with ID{} in today's Special task".format(ID))
                                continue
                            print("For task",data["TaskToday"]["SpecialTasks"][ID]["task_name"])
                            time_update = float(input("How many hour does this task took you in actuality\n?"))
                            data["TaskToday"]["SpecialTasks"][ID]["task_time"] = time_update
                            data["OKRLOG"][date_today][ID] = data["TaskToday"]["SpecialTasks"][ID]
                            reward_balance = reward(time_update,data["TaskToday"]["SpecialTasks"][ID]["task_difficulty"])
                            data["balance"] += ((data["TaskToday"]["SpecialTasks"][ID]["Reward"] + reward_balance) /2)
                            img_print(welldone_img)
                            print("You Earned ${}!Your Current Balance is ${}".format(data["TaskToday"]["SpecialTasks"][ID]["Reward"],data["balance"]))
                            data["TaskToday"]["SpecialTasks"].pop(ID)
                        elif Category == "R":
                            if ID not in data["TaskToday"]["RecursiveTasks"]:
                                print("Error,There is no task with ID{} in today's Special task".format(ID))
                                continue
                            print("For task",data["TaskToday"]["RecursiveTasks"][ID]["task_name"])
                            time_update = float(input("How many hour does this task took you in actuality\n?"))
                            data["TaskToday"]["RecursiveTasks"][ID]["task_time"] = time_update
                            data["OKRLOG"][date_today][ID] = data["TaskToday"]["RecursiveTasks"][ID]
                            data["balance"] += data["TaskToday"]["RecursiveTasks"][ID]["Reward"]
                            print("You Earned ${}!Your Current Balance is ${}".format(data["TaskToday"]["RecursiveTasks"][ID]["Reward"],data["balance"]))
                            img_print(welldone_img)
                            data["TaskToday"]["RecursiveTasks"].pop(ID)
                            if len(data["TaskToday"]["RecursiveTasks"]) == 0 and len(data["OKRLOG"][date_today]) > 3:
                                print("You have finished All Recursive Tasks! Awesome!")
                                img_print(awesome_img)
                                data["balance"] += 25
                        else:
                            print("Invalid Syntax: ID category undistinguished")
                            continue


        if cmd == "Return":
            print("Your Balance is:",data["balance"])
            return (data)
        if cmd == "MTK":
          print("Your sender mail address is:",mail_info["mail_address"])
          R_address = input("What's the mail_address for your MTK Recursive Tasks Section?\n")
          data["MTK"]["R_address"] = R_address
          S_address = input("What's the mail_address for your MTK Special Tasks Section?\n")
          data["MTK"]["S_address"] = S_address
        if cmd == "Store":
            data = OKR_Store(data)
        
        if cmd == "Load":
            file_path = input("Please enter the file path of your okr weekly log:\n")
            Varified = True # To be updated 
            if Varified:
                okr_log =  Load(file_path)     
            else:
                print("Sorry, please enter the file path of an authorized okr weekly log file")
                continue
            okr_log.log_all()
            data["Loaded"] = okr_log.week_log
            data["TaskToday"]["Date"] = "1999-05-25"
            print("Content Succesfully Loaded, re-enter OKR to Sync with the your LOG")
            
        if cmd == "RecursiveBank":
            while True:
                print("Hit 'ENTER' to summon the menu for RecursiveBank\n")
                cmd = input("How would you like to edit The RecursiveBank?\n")
                if cmd == "":
                  print("***RecursiveBank Menu***:\n"
                     "Enter 'Show' to show all the tasks in recursion\n"
                     "Enter 'Add' to add recursive task that recurs on specific days\n"
                     "Enter 'Import' to Import recursive task that recurs on specific days\n"
                     "Enter 'ClearAll' to empty the bank\n"
                     "Enter 'delete' omit specific task from the RecursiveBank\n"
                     "Enter 'Return' to return to OKR menu.\n")
                if cmd == "ClearAll":
                  Q = input("WARNING!Do you wish to clean the whole bank?('Y' or 'N')")
                  if Q == "Y":
                    data["RecursiveBank"].clear()

                if cmd == "Show":
                    print("RecursiveBank:")
                    for weekday in data["RecursiveBank"]:
                      print("****Weekday****:",weekday)
                      for ID in data["RecursiveBank"][weekday]:
                        print("***Task ID***:",ID)
                        print(data["RecursiveBank"][weekday][ID])
                if cmd == "Add":
                    R_w_d = input("Please enter the week dates that you wish this task to recur:\n"
                            "i.e: if you wish the task to recur on Monday and Sunday, enter '1,7'.\n" ) 
                    R_w_d = R_w_d.split(",")
                    for i in R_w_d:
                        if int(i) not in (1,2,3,4,5,6,7):
                            print("Invalid Syntax, please enter integers seperated by comma only!")
                            continue    
                    ID = input("Please enter the ID for the task:\n")
                    if ID[0] != "R":
                        ID = "R-"+ID
                    task_name = input("Please enter the Name of the task:\n")
                    task_difficulty = int(input("Please enter the Difficulty of the task(from 1 to 10):\n"))
                    task_time = float(input("Please enter the estimated time of the task(in hours):\n"))
                    task_description = input("Finally,Please enter further descrition of the task if any.\n")
                    Reward = reward(task_time,task_difficulty)
                    for i in R_w_d:
                      if i not in data["RecursiveBank"]:
                        data["RecursiveBank"][i] = {}
                      data["RecursiveBank"][i][ID] = {}
                      data["RecursiveBank"][i][ID]["Reward"] =  Reward
                      data["RecursiveBank"][i][ID]["task_name"] =  task_name
                      data["RecursiveBank"][i][ID]["task_difficulty"] =  task_difficulty
                      data["RecursiveBank"][i][ID]["task_time"] =  task_time
                      data["RecursiveBank"][i][ID]["task_description"] =  task_description
                      if i == str(weekday_today):
                        data["TaskToday"]["RecursiveTasks"][ID] = data["RecursiveBank"][i][ID]
                    
                if cmd == "Delete":
                    ID = input("Please enter the ID of the task that you wish to delete:\n")
                    for wd in data["RecursiveBank"]:
                      for id in data["RecursiveBank"][wd]:
                        if id == ID:
                          print(data["RecursiveBank"][wd][id])
                          Q = input("Are you sure that you wish to delete the task above?('Y' or 'N')\n")
                          if Q == "Y":
                            data["RecursiveBank"][wd].pop(ID)
                if cmd == "Import":
                    R_w_d = input("Please enter the week dates that you wish this task to recur:\n"
                            "i.e: if you wish the task to recur on Monday and Sunday, enter '1,7'.\n" ) 
                    R_w_d = R_w_d.split(",") 
                    for i in R_w_d:
                        if int(i) not in (1,2,3,4,5,6,7):
                            print("Invalid Syntax, please enter integers seperated by comma only!")
                            continue
                    ID = input("Please enter the ID for the task that you are importing:\n")
                    info = input("Please paste into the info you wish to be logged for this task:\n")
                    for i in info.split(","):
                        item = i.split(":")
                        if item[0] == "'Reward'":
                            Reward = float(item[1])
                        elif item[0] == " 'task_name'":
                            task_name = item[1]
                        elif item[0] == " 'task_difficulty'":
                            task_difficulty = float(item[1])
                        elif item[0] == " 'task_time'":
                            task_time = float(item[1])
                        elif item[0] == " 'task_description'":
                            task_description = item[1]
                        else: 
                            print("Invalid Syntax, Please copy and paste everything in the '{}' to import an task")
                            continue
                    for i in R_w_d:
                      if i not in data["RecursiveBank"]:
                        data["RecursiveBank"][i] = {}
                      data["RecursiveBank"][i][ID] = {}
                      data["RecursiveBank"][i][ID]["Reward"] =  Reward
                      data["RecursiveBank"][i][ID]["task_name"] =  task_name
                      data["RecursiveBank"][i][ID]["task_difficulty"] =  task_difficulty
                      data["RecursiveBank"][i][ID]["task_time"] =  task_time
                      data["RecursiveBank"][i][ID]["task_description"] =  task_description
                      if i == str(weekday_today):
                        data["TaskToday"]["RecursiveTasks"][ID] = data["RecursiveBank"][i][ID]
                    print("Task Successfully Imported")
                if cmd == "Return":
                    break
                
                    
        if cmd == "Archive":
            while True:
                star_print("Welcome to the Archive Menu")
                Log_type = input("Which type of Log would you like to observe?('F' for finished, 'UF' for unfinished)\n")
                while True:
                  if Log_type == "F":
                      print("Hit 'ENTER' to summon the Archive Menu:\n")
                      cmd = input("please enter archive commands:\n")
                      if cmd == "":
                        print("Archive Menu:\n"
                          "Enter 'ShowAll' to Show all the completed tasks in the log\n"
                          "Enter 'FindByDate' to find all completed tasks under a specific date\n"
                          "Enter 'Return' to return to the Archive Menu\n")
                      if cmd == "Return":
                        break
                      if cmd == "ShowAll":
                          for i in data["OKRLOG"]:
                              star_print("Date:{}".format(i))
                              for j in data["OKRLOG"][i]:
                                print(data["OKRLOG"][i][j])
                      if cmd == "FindByDate":
                          Date = input("Please enter the Date you wish to locate")
                          for i in data["OKRLOG"][Date]:
                            print(data["OKRLOG"][Date][i])
                  elif Log_type == "UF":
                      print("Hit 'ENTER' to summon the Archive Menu:\n")
                      cmd = input("please enter archive commands:")
                      if cmd == "":
                        print("Archive Menu:\n"
                          "Enter 'ShowAll' to Show all the unfinished tasks in the log\n"
                          "Enter 'FindByDate' to find all unfinished tasks under a specific date\n"
                          "Enter 'Return' to return to the Archive Menu\n")
                      if cmd == "Return":
                        break
                      if cmd == "ShowAll":
                        for dates in data["OKRLOG_unfinished"]:
                            star_print("Date:{}".format(dates))
                            for tasktype in data["OKRLOG_unfinished"][dates]:
                                if tasktype != "Date":
                                    for task_id in data["OKRLOG_unfinished"][dates][tasktype]:
                                        print("***Tasks ID:{}***",format(task_id))
                                        print(data["OKRLOG_unfinished"][dates][tasktype][task_id])
                      if cmd == "FindByDate":
                        dates = input("Please enter the Date you wish to locate")
                        star_print("Date:{}".format(dates))
                        for tasktype in data["OKRLOG_unfinished"][dates]:
                            if tasktype != "Date":
                                for task_id in data["OKRLOG_unfinished"][dates][tasktype]:
                                    print("***Tasks ID:{}***",format(task_id))
                                    print(data["OKRLOG_unfinished"][dates][tasktype][task_id])

                STATUS = input("Would you like to contine?('Y' or 'N')")
                if STATUS == "N":
                        break
        if cmd == "Stats":
            data = OKR_stats(data)     
                       
        if cmd == "TaskToday":
            while True:
                star_print("Hit 'ENTER' to summon the menu for today's tasks")
                cmd = input("Please enter commands for Today's Task:\n")
                if cmd == "":
                  print("Menu for Today's Tasks: \n"
                     "Enter 'Balance' to check account balance \n"
                     "Enter 'show' to view all of today's tasks \n"
                     "Enter 'Complete' to complete specific tasks of today \n"
                     "Enter 'Edit' to modify today's tasks \n"
                     "Enter 'Return' to go back to OKR menu \n")
                if cmd == "Balance":
                    print(data["balance"])
                if cmd == "Return":
                    break

                if cmd == "Sync":
                    try:
                        gmail_user = mail_info["mail_address"]
                        gmail_password = mail_info["mail_password"]
                        Receipeints_list = [data["MTK"]["S_address"]]
                        for ID in data["TaskToday"]["SpecialTasks"].keys():
                            body = "ID:{}\n\nInfo:{}".format(ID,str(data["TaskToday"]["SpecialTasks"][ID]))
                            task_name = data["TaskToday"]["SpecialTasks"][ID]["task_name"]
                            msg = Msg_Editor(task_name,body)
                            Mail_Send(gmail_user,gmail_password,Receipeints_list,msg)
                        print("-All Special Tasks Synchronized-")
                    except:
                        print("Unable to Sync with MeisterTask")
                if cmd == "Show":
                    sum_time = 0
                    sum_reward = 0
                    print("***Special Tasks***:")
                    for i in data["TaskToday"]["SpecialTasks"]:
                        print("**Task ID**:",i)
                        print(data["TaskToday"]["SpecialTasks"][i])
                        sum_time += float(data["TaskToday"]["SpecialTasks"][i]["task_time"])
                        sum_reward += float(data["TaskToday"]["SpecialTasks"][i]["Reward"])
                    print("***Recursive Tasks***:")
                    for i in data["TaskToday"]["RecursiveTasks"]:
                        print("**Task ID**:",i)
                        print(data["TaskToday"]["RecursiveTasks"][i])
                        sum_time += float(data["TaskToday"]["RecursiveTasks"][i]["task_time"])
                        sum_reward += float(data["TaskToday"]["RecursiveTasks"][i]["Reward"])
                    
                    print("\n***Summary***")
                    print("Rewards Left:$",sum_reward)
                    print("Sum task time:{}hours".format(sum_time))



                        
                if cmd == "Complete":
                    IDs = input("Congrats! Now, please enter the IDs of the task that you have finished:\n"
                           "if there are multiple tasks, be sure to seperate the IDs by a comma!!!\n ")
                    IDs = IDs.split(",")
                    for ID in IDs:
                        Category = ID[0]
                        if Category == "S":
                            if ID not in data["TaskToday"]["SpecialTasks"]:
                                print("Error,There is no task with ID{} in today's Special task".format(ID))
                                continue
                            print("For task",data["TaskToday"]["SpecialTasks"][ID]["task_name"])
                            time_update = float(input("How many hour does this task took you in actuality\n?"))
                            data["TaskToday"]["SpecialTasks"][ID]["task_time"] = time_update
                            data["OKRLOG"][date_today][ID] = data["TaskToday"]["SpecialTasks"][ID]
                            reward_balance = reward(time_update,data["TaskToday"]["SpecialTasks"][ID]["task_difficulty"])
                            data["balance"] += ((data["TaskToday"]["SpecialTasks"][ID]["Reward"] + reward_balance) /2)
                            img_print(welldone_img)
                            print("You Earned ${}!Your Current Balance is ${}".format(data["TaskToday"]["SpecialTasks"][ID]["Reward"],data["balance"]))
                            data["TaskToday"]["SpecialTasks"].pop(ID)
                        elif Category == "R":
                            if ID not in data["TaskToday"]["RecursiveTasks"]:
                                print("Error,There is no task with ID{} in today's Special task".format(ID))
                                continue
                            print("For task",data["TaskToday"]["RecursiveTasks"][ID]["task_name"])
                            time_update = float(input("How many hour does this task took you in actuality\n?"))
                            data["TaskToday"]["RecursiveTasks"][ID]["task_time"] = time_update
                            data["OKRLOG"][date_today][ID] = data["TaskToday"]["RecursiveTasks"][ID]
                            data["balance"] += data["TaskToday"]["RecursiveTasks"][ID]["Reward"]
                            print("You Earned ${}!Your Current Balance is ${}".format(data["TaskToday"]["RecursiveTasks"][ID]["Reward"],data["balance"]))
                            img_print(welldone_img)
                            data["TaskToday"]["RecursiveTasks"].pop(ID)
                            if len(data["TaskToday"]["RecursiveTasks"]) == 0 and len(data["OKRLOG"][date_today]) > 3:
                                print("You have finished All Recursive Tasks! Awesome!")
                                img_print(awesome_img)
                                data["balance"] += 25
                        else:
                            print("Invalid Syntax: ID category undistinguished")
                            continue
                    

                if cmd == "Edit":
                    Type = input("Which Type of Class do you wish to edit?Enter 'S' for SPECIAl 'R' for Recursive.\n")
                    if Type == "S":
                        while True:
                            print("Hit 'ENTER' to summon menu for modifying tasks\n")
                            cmd = input("How would you like to edit Today's Special tasks?\n")
                            if cmd == "":
                              print("Task Menu: \n"
                                 "Enter 'Add' to add tasks\n"
                                 "Enter 'Delete' to delete tasks\n")
                            if cmd == "Add":
                                ID = input("Please enter the ID for the task:\n")
                                if ID[0] != "S":
                                    ID = "S-"+ID
                                data["TaskToday"]["SpecialTasks"][ID] = {}
                                try:
                                    task_name = input("Please enter the Name of the task:\n")
                                    task_difficulty = int(input("Please enter the Difficulty of the task(from 1 to 10):\n"))
                                    task_time = float(input("Please enter the estimated time of the task(in hours):\n"))
                                    task_description = input("Finally,Please enter further descrition of the task if any.\n")
                                    Reward = reward(task_time,task_difficulty)
                                except ValueError:
                                    print("Please enter a number instead of a letter for difficulty or time")
                                data["TaskToday"]["SpecialTasks"][ID]["Reward"] =  Reward
                                data["TaskToday"]["SpecialTasks"][ID]["task_name"] =  task_name
                                data["TaskToday"]["SpecialTasks"][ID]["task_difficulty"] =  task_difficulty
                                data["TaskToday"]["SpecialTasks"][ID]["task_time"] =  task_time
                                data["TaskToday"]["SpecialTasks"][ID]["task_description"] =  task_description
                                if data["MTK"]!={}:
                                  Q = input("Would you like to synchronize w/ MeisterTask?('Y' or 'N')\n")
                                  if Q == "Y":
                                    gmail_user = mail_info["mail_address"]
                                    gmail_password = mail_info["mail_password"]
                                    Receipeints_list = [data["MTK"]["S_address"]]
                                    body = "ID:{}\n\nInfo:{}".format(ID,str(data["TaskToday"]["SpecialTasks"][ID]))
                                    msg = Msg_Editor(task_name,body)
                                    Mail_Send(gmail_user,gmail_password,Receipeints_list,msg)
                                    print("-Task Synchronized-")
                            if cmd == "Delete":
                                IDs = input("Please enter the IDs of the task that you wish to delete:\n"
                                        ", be sure to seperate them by comma if three are multiple tasks!\n")
                                for ID in IDs.split(","):
                                    print(data["TaskToday"]["SpecialTasks"][ID])
                                    Q = input("Are you sure that you wish to delete the task above?('Y' or 'N')\n")
                                    if Q == "Y":
                                        data["TaskToday"]["SpecialTasks"].pop(ID)
                            STATUS = input("Would you like to contine editing tasks?('Y' or 'N')\n")
                            if STATUS == "N":
                                break
                    if Type == "R":
                        while True:
                            print("Hit 'ENTER' to summon menu for modifying tasks")
                            cmd = input("How would you like to edit Today's Recursive tasks?\n")
                            if cmd == "":
                              print("Task Menu: \n"
                                 "Enter 'Add' to add tasks\n"
                                 "Enter 'Delete' to delete tasks\n")
                            if cmd == "Add":
                                ID = input("Please enter the ID for the task:\n")
                                if ID[0] != "R":
                                    ID = "R-"+ID
                                data["TaskToday"]["RecursiveTasks"][ID] = {}
                                for wkd in data["RecursiveBank"]:
                                  for id in  data["RecursiveBank"][wkd]:
                                    if id == ID:
                                      data["TaskToday"]["RecursiveTasks"][ID].update(data["RecursiveBank"][wkd][ID])
                                      break                                
                                if data["MTK"]!={}:
                                  Q = input("Would you like to synchronize w/ MeisterTask?('Y' or 'N')")
                                  if Q == "Y":
                                    gmail_user = mail_info["mail_address"]
                                    gmail_password = mail_info["mail_password"]
                                    Receipeints_list = [data["MTK"]["R_address"]]
                                    task_name = data["TaskToday"]["RecursiveTasks"][ID]["task_name"]
                                    body = "ID:{}\n\nInfo:{}".format(ID,str(data["TaskToday"]["RecursiveTasks"][ID]))
                                    msg = Msg_Editor(task_name,body)
                                    Mail_Send(gmail_user,gmail_password,Receipeints_list,msg)
                                    print("-Task Synchronized-")
                            if cmd == "Delete":
                                IDs = input("Please enter the IDs of the task that you wish to delete:\n"
                                        ", be sure to seperate them by comma if three are multiple tasks!\n")
                                for ID in IDs.split(","):
                                    print(data["TaskToday"]["RecursiveTasks"][ID])
                                    Q = input("Are you sure that you wish to delete the task above?('Y' or 'N')\n")
                                    if Q == "Y":
                                        data["TaskToday"]["RecursiveTasks"].pop(ID)
                            STATUS = input("Would you like to contine editing tasks?('Y' or 'N')\n")
                            if STATUS == "N":
                                break

#@title Calender module {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
# Week Day
def weekday_today():
  from datetime import date
  import datetime
  year = int(str(date.today()).split("-")[0])
  month = int(str(date.today()).split("-")[1])
  day = int(str(date.today()).split("-")[2])
  return(datetime.date(year, month, day).isocalendar()[2])
  
def findDay(date): 
    if "-" in date:
        temp = date.split("-")
        date = ""
        for i in temp:
            date += i + " "
        date = date[0:-1]
    born = datetime.datetime.strptime(date, '%Y %m %d').weekday() 
    return (calendar.day_name[born])

"""#OKR Store"""

#@title OKR Store interface {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def OKR_Store(data):
    p1 = draw_prob(data["Store"]["p1"][0])
    p2 = draw_prob(data["Store"]["p2"][0])
    p3 = draw_prob(data["Store"]["p3"][0])
    p4 = draw_prob(data["Store"]["p4"][0])
    star_print("Welcome to the OKR_Store! Your Balance is:{}. Hit 'ENTER' to summon store menu.".format(data["balance"]))
    while True:
        star_print("Your Balance is:{}.Hit 'ENTER' to summon store menu.".format(data["balance"]))
        cmd = input("What would you like to do in the OKR_store?\n")
        
        if cmd == "Gamble": 
          img_print(Gamble_entry_img)
          print("Welcome to The Cascino! Hit 'ENTER' to see the games")
          while True:
            cmd = input("[CASCINO] Hello young money! How would you like to make use of your money?\n"
             "Hit 'ENTER' to summon Menu\n")
            if cmd == "":
              print("Cascino menu:\n"
                "Enter 'BoS' to play dice roll game\n"
                "Enter 'BJ' to play Black Jack\n"
                "Enter 'Return' to return to the store\n")
            if cmd == "Return":
              print("Returning to the menu")
              break
            if cmd == "BoS":
              print("Welcome to the Dice roll! The rule is simple:\n"
                  "The house will throw two dices and you guess if the Sum of two dice is either\n"
                  "BIG or small \n"
                  "Get it? Let's ROLL!!!")
              while True:
                bet = input("So, Big or Small? ('B' or 'S')\n")
                money_bet = int(input("How much would you like to bet? $50 is the maximum\n"))
                if data["balance"] - money_bet < 0:
                  print("Sorry,you cant afford this. Your current balance is:",data["balance"])
                  break
                data["balance"] += B_or_s(bet,money_bet)
                print("Your balance now is:",data["balance"])
                Q = input("Would you like to continue the game?('Y' or 'N')\n")
                if Q == "N":
                  break
            if cmd == "BJ":
                star_print("Welcome to Black Jack!")
                data = Black_Jack(data)
        elif cmd == "Buy":
          while True:
            print("[BUY] Lucky Draws:\n"
              "***Draw Once*** Price:$25 Item_code:  D1 \n"
              "*Open a Pack* Price:$100 Item_code:  P1 \n"
              "*Pack_of_Five** Price:$400 Item_code:  P5 \n"
              "Each pack contain 5 draws! The more you buy, the cheaper each draw cost!\n"
              "Enter 'Return' to return to menu\n")
            Option = input("Please Enter Item_code to make a purchase~\n")
            if Option == "P1":
              if data["balance"] >= 100:
                data["balance"] -= 100
                print(Draw(5,p1,p2,p3,p4))
              else:
                print("Sorry, You can not afford this!")
            elif Option == "D1":
              if data["balance"] >= 25:
                data["balance"] -= 25
                print(Draw(1,p1,p2,p3,p4))
              else:
                print("Sorry, You can not afford this!")
            elif Option == "P5":
              if data["balance"] >= 400:
                data["balance"] -= 400
                print(Draw(25,p1,p2,p3,p4))
              else:
                print("Sorry, You can not afford this!")
            if Option == "Return":
              print("Returning to the menu")
              break
        elif cmd == "Return":
            return data
        else: 
          print("Store Menu: \n"
             "Enter 'Buy' to purchase an item\n"
             "Enter 'Gamble' to test your Luck!\n"
             "Enter 'Return' to return to the OKR system\n")

#@title Rewards Mod {display-mode: "form"}
# This code will be hidden when the notebook is loaded.
def draw_prob(days, p_fail = 0.1 , draws_per_day = 3 ):
  pr = 1 - exp(log(p_fail)/(draws_per_day*days))
  return(pr)
  
def Draw(n,p1=draw_prob(90),p2=draw_prob(30),p3=draw_prob(7),p4=draw_prob(3)):
    for i in range(int(n)):
        sleep(1)
        odd = random.random()
        if odd < p1:
            print("OMG!!!You Won the TOP Prize!!!")
            img_Prize(1)
            star_print(data["Store"]["p1"][1])
            continue
        elif p1 < odd < p1+p2:
            print("The Grand Prize is Yours! Amazing!!")
            img_Prize(2)
            star_print(data["Store"]["p2"][1])
            continue
        elif p1+p2 < odd < p1+p2+p3:
            print("You had your self a good deal!")
            img_Prize(3)
            star_print(data["Store"]["p3"][1])
            continue
        elif p1+p2+p3 < odd < p1+p2+p3+p4:
            print("Not bad, not bad at all!")
            img_Prize(4)
            star_print(data["Store"]["p4"][1])
            continue
        else: 
            print("Sorry,Please try again")
            img_Prize(5)

def reward(time,difficulty):
        time_lower_bound = 0.25
        time_upper_bound = 4
        difficulty_upper_bound = 10
        if time < time_lower_bound:
            time = time_lower_bound
        if time > time_upper_bound:
            time = time_upper_bound
        if difficulty > difficulty_upper_bound:
            difficulty = difficulty_upper_bound
        difficulty = abs(difficulty)
        reward = 3*(time**0.5*difficulty**0.5) + random.choice([-1,-0.5,0,0.5,1,1.5,2])
        return(round(reward))

#@title Casino Mod {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def double_dice_roll():
  r1 = np.random.choice(range(1,7))
  r2 = np.random.choice(range(1,7))
  plt.figure(figsize=(2,1))
  plt.subplot(1,2,1)
  plt.imshow(diceFaces[r1-1])
  plt.axis('off')
  plt.subplot(1,2,2)
  plt.imshow(diceFaces[r2-1])
  plt.axis('off')
  plt.show()
  return (r1+r2)

def B_or_s(guess,bet):
  if int(bet) > 50:
    bet = 50
  else:
    bet = abs(bet)
    
  small = range(1,7)
  Big = range(8,13)
  roll = double_dice_roll()
  if guess == "B":
    if roll in Big:
      img_print(Win_Lose["Win"])
      return (bet)
    else:
      img_print(Win_Lose["Lose"])
      return (-bet)
  else:
    if roll in small:
      img_print(Win_Lose["Win"])
      return (bet)
    else:
      img_print(Win_Lose["Lose"])
      return (-bet)

#@title PlayCard  Mod {display-mode: "form"}
import random
def rank_value(rank , A_one = False):
    RANKS = {"J":10,"Q":10,"K":10,"A":11}
    if A_one:
        RANKS["A"] = 1
    if rank in RANKS:
        return RANKS[str(rank)]
    else:
        return(int(rank))
class Card:
    def __init__(self,rank,suit):
        self.rank = rank
        self.suit = suit # 1,2,3,4 = ♥♦♣♠

    def print(self,show = True):
        if show:
            print('┌───────┐')
            print(f'| {self.rank:<2}    |')
            print('|       |')
            print(f'|   {self.suit}   |')
            print('|       |')
            print(f'|    {self.rank:>2} |')
            print('└───────┘') 
        else :
            print('┌───────┐')
            print(f'| {"?":<2}    |')
            print('|       |')
            print(f'|   {"?"}   |')
            print('|       |')
            print(f'|    {"?":>2} |')
            print('└───────┘') 

class Deck:
    'represents a deck of 52 cards'
    # ranks and suits are Deck class variables
    ranks = ('2','3','4','5','6','7','8','9','10','J','Q','K','A')
    # suits is a set of 4 Unicode symbols representing the 4 suits  
    suits = ('♥','♦','♣','♠')

    def __init__(self,number_of_decks = 1):
        'initialize one deck of 52 cards'
        self.deck = [] # deck is initially empty
        for i in range(number_of_decks):
            for suit in Deck.suits: # suits and ranks are Deck
                for rank in Deck.ranks: # class variables
                # add Card with given rank and suit to deck
                    self.deck.append(Card(rank,suit))
    def showAll(self):
        "Print all cards in the deck"
        for cards in self.deck:
            Card.print(cards , show = True)

    def dealCard(self,show = True, A_one = False, get_card = False):
        'deal (pop and return) card from the top of the deck'
        card_delt = self.deck.pop()
        Card.print(card_delt,show)
        if get_card:
            return int(rank_value(card_delt.rank,A_one)),card_delt
        else:
            return int(rank_value(card_delt.rank,A_one))
        

    def shuffle(self):
        'shuffle the deck'
        random.shuffle(self.deck)
    
    def num_cards(self):
        'Number of cards in the deck'
        return (len(self.deck))

#@title Black_Jack  Mod {display-mode: "form"}
def Black_Jack(data , number_decks = 4):
    #Initialize
    Card_Pool = Deck(number_decks)
    Card_Pool.shuffle()
    num_cards = Card_Pool.num_cards()
    while True:
        passed = False
        #Condition Check
        if data["balance"] < 10:
            print("Sorry, you can not afford this game!")
            return (data)
        print("Your Balance is:",data["balance"])
        Continue = input("Next round? (Y or N)").upper()
        finished = False
        if Continue == "N":
            return(data)
        #Initialization
        player_sum = 0
        house_sum = 0
        player_got_A = False
        house_got_A = False
        if num_cards < 104:
            print("Shuffling Cards...")
            Card_Pool = Deck(number_decks)
            Card_Pool.shuffle()
            sleep(2)
            print("Deck Shuffled")

        #Initialization Complete
        clear_output(wait=True)
        bet = float(input("How much would you like to bet?\n"))
        if bet > 100:
            bet = 100
        elif bet < 10:
            bet = 10
        
        star_print("Cards of the House:")
        value, card_shown = Card_Pool.dealCard(get_card = True)
        if value == 11:
            house_got_A = True
        house_sum += value
        sleep(1)
        value, card_hidden = Card_Pool.dealCard(show = False,get_card = True)
        if value == 11:
            house_got_A = True
        house_sum += value
        if house_sum == 21:
            img_print(BlackJack)
            print("House Black Jack,You lose...") 
            img_print(Win_Lose["Lose"])
            data["balance"] -= bet
            continue
        
        star_print("Your Cards:")
        for i in range(2):
            sleep(1)
            A_one = False
            if player_sum > 10:
               A_one = True 
               
            value = Card_Pool.dealCard(True, A_one)
            player_sum += value
            if value == 11:
                player_got_A = True
        if player_sum == 21:
            img_print(BlackJack)
            img_print(Win_Lose["Win"])
            data["balance"] += 1.5*bet
            continue

        print("Total value:",player_sum)
        print("\n")
        if player_sum > 10:
            A_one = True 
        
        
        Double_Down = input("Double Down? (Y or N)\n").upper()
        if Double_Down == "Y":
            passed = True
            bet = 2*bet
            player_sum += Card_Pool.dealCard(True, A_one)
            print("Total value:",player_sum)
            print("\n")
            if player_sum > 21 and player_got_A:
                player_sum -= 10
                player_got_A = False
            
            elif player_sum > 21:
                print("Too much points!")
                img_print(Win_Lose["Lose"])
                data["balance"] -= bet
                finished = True
                print("The hidden_card:")
                Card.print(card_hidden)
                continue
            sleep(2)
            
        print("Your Turn!")
        while not passed:
            action = input("Hit or Stand? ('H' or 'S')\n").upper()
            if action == "S":
                break
            if player_sum > 10:
               A_one = True 
            player_sum += Card_Pool.dealCard(True, A_one)
            if player_sum > 21 and player_got_A:
                player_sum -= 10
                player_got_A = False
            elif player_sum > 21:
                print("Too much points!")
                img_print(Win_Lose["Lose"])
                data["balance"] -= bet
                finished = True
                print("The hidden_card:")
                Card.print(card_hidden)
                break
            print("Total value:",player_sum)
            print("\n")
        
        if finished:
            continue

        clear_output(wait=True)
        star_print("Your total points:{}".format(player_sum))
        
        sleep(1)
        print("House's first card:")
        Card.print(card_shown)
        print("The hidden_card:")
        Card.print(card_hidden)
        print("House's Turn!")
        sleep(2)

        
        while True:
            sleep(1)
            print("House's Total value:",house_sum)
            if player_sum > 11:
               A_one = True 
            if house_sum > 21:
                print("Too much points!")
                img_print(Win_Lose["Win"])
                data["balance"] += bet
                break
            elif house_sum > player_sum:
                img_print(Win_Lose["Lose"])
                data["balance"] -= bet
                break
            elif house_sum > 16 and house_sum == player_sum:
                print("TIE!")
                break
            house_sum += int(Card_Pool.dealCard(True, A_one))
            if house_got_A and house_sum > 21:
                house_sum -= 10
                house_got_A = False

        num_cards = Card_Pool.num_cards()
        print("Cards Left:",num_cards)

"""# Advanced_GPK_Module"""

#@title Gmail Communication Mod {display-mode: "form"}
def Msg_Editor(mail_subject,mail_body,tail="-Sent From Colab, Powered by Python"):
  body = mail_body + "\n\n" + tail
  message = "Subject:{}\n\n{}".format(mail_subject,body)
  return(message)

def Mail_Send(gmail_user,gmail_password,Receipeints_list,msg):
  msg = "From:{}\nTo:{}\n".format(gmail_user,Receipeints_list[0])+ msg
  try:
    server = smtplib.SMTP_SSL('smtp.gmail.com:465')
    server.ehlo()
    server.login(gmail_user, gmail_password)
    server.sendmail(gmail_user, Receipeints_list , msg)
    server.close()

    print ('Email sent!')
  except:
    print ('Something went wrong...')

def Done_today(mail_address,mail_password,SERVER = '(RFC822)',mail_scope = 20 ): 
    "Returns a list of Tasks that are finished Today"
    Task_finished = []
    mail = imaplib.IMAP4_SSL('imap.gmail.com')
    mail.login("bliao2@uci.edu","321890Ga")
    mail.select('inbox')
    status, data = mail.search(None, 'ALL')
    mail_ids = []   
    for block in data:
        mail_ids += block.split()
    for i in tqdm_notebook(range(-1,-mail_scope,-1)):
        status, data = mail.fetch(mail_ids[i], '(RFC822)')
        for response_part in data:
            if isinstance(response_part, tuple):
                message = email.message_from_bytes(response_part[1])
                mail_from = message['from']
                mail_subject = message['subject']
                if message.is_multipart():
                    mail_content = ''
                    for part in message.get_payload():
                        if part.get_content_type() == 'text/plain':
                            mail_content += part.get_payload()
                else:
                    mail_content = message.get_payload()
                if mail_from == "MeisterTask <reply@meistertask.com>":
                    task_name = mail_subject.split("'")[1]
                    task_status = mail_subject.split("'")[3]
                    if task_status == "Done_Today":
                        Task_finished.append(task_name)
    return(Task_finished)

#@title STATS module {display-mode: "form"}
def OKR_stats(data):
    #Initialize
    OKRLOG = data["OKRLOG"]
    PRODUCTIVITY = []
    DATES = list(OKRLOG.keys())
    WEEKDAYS = []
    for date in OKRLOG:
        WEEKDAYS.append(findDay(date))
        total_credit = 0
        for tasks in OKRLOG[date]:
            total_credit += OKRLOG[date][tasks]["Reward"]
        PRODUCTIVITY.append(total_credit)
    #Info of the weeks 
    week_number = 0
    Month = {0:0}
    for date in DATES:
        if findDay(date) == "Monday":
            Month [week_number] = PRODUCTIVITY[DATES.index(date)]
        elif findDay(date) == "Sunday":
            week_number += 1
        else:
            Month [week_number] += PRODUCTIVITY[DATES.index(date)]

    WEEK_NUM = list(Month.keys())
    WEEK_PRODUCTIVITY = list(Month.values())
    print("Your Average Productivity is:$",np.average(PRODUCTIVITY))
    while True:
        cmd = input("Please enter STATS cmds:\n")   
        if cmd == "A":
            fig_all = plt.figure(figsize=(20,10))
            plt.bar(range(len(PRODUCTIVITY)),PRODUCTIVITY)
            fig_all.suptitle('Productivity of ALL time')
            plt.xlabel('Dates')
            plt.ylabel('Productivity/credits received')
            plt.show()
        elif cmd == "7":
            fig_last_7 = plt.figure(figsize=(20,10))
            plt.bar(WEEKDAYS[-7:len(WEEKDAYS)],PRODUCTIVITY[-7:len(WEEKDAYS)])
            fig_last_7.suptitle('Productivity in Last 7 days')
            plt.xlabel('Dates')
            plt.ylabel('Productivity/credits received')
            plt.show()
        elif cmd == "W":      
            fig_weeks = plt.figure(figsize=(20,10))
            plt.bar(WEEK_NUM,WEEK_PRODUCTIVITY)
            fig_weeks.suptitle('Productivity by weeks')
            plt.xlabel('Weeks')
            plt.ylabel('Productivity/credits received')
            plt.show()
        elif cmd == "R":
            return(data)
        else:
            print("STATS Menu:\n"
                "ENTER: [A] to see [A]ll productivities \n"
                "ENTER: [7] to see productivities of the last [7] days \n"
                "ENTER: [W] to see productivities by [W]eeks \n"
                "ENTER [R] to [R]eturn to the Exit")

"""# OKR Weekly Load Mod"""

#@title Load Class {display-mode: "form"}
def getText(filename):
    "This function reads all plain text within a docx document"
    doc = docx.Document(filename)
    fullText = []
    for para in doc.paragraphs:
        fullText.append(para.text)
    return '\n'.join(fullText)
def reward(time,difficulty):
        time_lower_bound = 0.25
        time_upper_bound = 4
        difficulty_upper_bound = 10
        if time < time_lower_bound:
            time = time_lower_bound
        if time > time_upper_bound:
            time = time_upper_bound
        if difficulty > difficulty_upper_bound:
            difficulty = difficulty_upper_bound
        difficulty = abs(difficulty)
        reward = 3*(time**0.5*difficulty**0.5) + random.choice([-1,-0.5,0,0.5,1,1.5,2])
        return(round(reward))    
class Load:
    "This class is dedicated to load information of OKR weekly logs"
    def __init__(self,file_path):
        text = getText(file_path)
        self.log_list = []
        self.week_log = []
        for i in text.split("\n"):
            self.log_list.append(i.strip())  
    
    def log_day(self,n):
        "Get the data for specific day of log; n = number of day in the week"
        idx_head = self.log_list.index("Day " + str(n))
        if n < 7:
            idx_tail = self.log_list.index("Day " + str(n+1))
        else: 
            idx_tail = self.log_list.index(str("Week_Summary"))
        self.log_of_day = self.log_list[idx_head:idx_tail]
        n_day = self.log_of_day[0]
        date = self.log_of_day[1]
        new_day_log = Day()
        try:
            new_day_log.set_Priority_Task(self.log_of_day[self.log_of_day.index("Priority Task:"):self.log_of_day.index("Special OKR:")])
        except ValueError:
            print("For day {}, Priority_Task is not logged".format(n))
        try:
            new_day_log.set_Special_Task(self.log_of_day[self.log_of_day.index("Special OKR:"):self.log_of_day.index("Recursive OKR:")])
        except ValueError:
            print("For day {}, Special_Task is not logged".format(n))
        try:
            new_day_log.set_Recursive_Task(self.log_of_day[self.log_of_day.index("Recursive OKR:"):self.log_of_day.index("Daily Summary:")])
        except ValueError:
            print("For day {}, Recursive_Task is not logged".format(n))
        return new_day_log

    def log_all(self):
        "Get the data for all 7 days in a week"
        for i in range(7):
            i = i + 1
            self.week_log.append(self.log_day(i))

    def logs_show(self):
        "Show all the tasks within each day"
        if self.week_log == []:
            print("Load the weekly logs first!")
        else:
            for days in range(len(self.week_log)):
                print("Day:",days+1)
                self.week_log[days].show()
                print("\n")

    def get_week_objective(self):
        "Load WeekObjectives into self.WeekObjective"
        self.WeekObjective = Day()
        try:
            self.WeekObjective.set_Priority_Task(self.log_list[self.log_list.index("Priority Task of the Week:"):self.log_list.index("Daily Objective:")])
        except :
            print("For WeekObjective, Priority_Task is not logged")
        try:
            self.WeekObjective.set_Recursive_Task(self.log_list[self.log_list.index("Daily Objective:"):self.log_list.index("Special Objective: (Dead_Line Required)")])
        except :
            print("For WeekObjective, Recursive_Task is not logged")
        try:
            self.WeekObjective.set_Special_Task(self.log_list[self.log_list.index("Special Objective: (Dead_Line Required)"):self.log_list.index("OKR_Logs")])
        except :
            print("For WeekObjective, Special_Task is not logged")

    def week_okr_show(self):
        self.WeekObjective.show()

#@title Day Class {display-mode: "form"}
class Day:
    def __init__(self):
        self.Priority_Task = []
        self.Special_Task = []
        self.Recursive_Task = []
    def set_Priority_Task(self,list_of_tasks):
        for string in list_of_tasks:
            if len(string) > 0:
                try:
                    if string[0] == "G":
                        a_task = okr_task()
                        self.Priority_Task.append(a_task)
                        a_task.set_Objective(string)
                    elif string[0].upper() == "K":
                        a_task.set_KeyResult(string)
                    else:
                        pass
                except UnboundLocalError: 
                    print("Failed to load, Check docx format.(If all goals start with G)")

    
    def set_Special_Task(self,list_of_tasks):
        for string in list_of_tasks:
            if len(string) > 1:
                try:
                    if string[0] == "G":
                        a_task = okr_task()
                        self.Special_Task.append(a_task)
                        a_task.set_Objective(string)
                    elif string[0].upper() == "K":
                        a_task.set_KeyResult(string)
                    else:
                        pass
                except UnboundLocalError: 
                    print("Failed to load, Check docx format.(If all goals start with G)")

    def set_Recursive_Task(self,list_of_tasks):
        for string in list_of_tasks:
            if len(string) > 1:
                try:
                    if string[0] == "G":
                        a_task = okr_task()
                        self.Recursive_Task.append(a_task)
                        a_task.set_Objective(string)
                    elif string[0].upper() == "K":
                        a_task.set_KeyResult(string)
                    else:
                        pass
                except UnboundLocalError: 
                    print("Failed to load, Check docx format.(If all goals start with G)")

    def show(self):
        print("Priority_Task:")
        for tasks in self.Priority_Task:
            print(tasks)
        print("Special_Task:")
        if self.Special_Task != []:
            for tasks in self.Special_Task:
                print(tasks)
        else: 
            print("None")
        print("Recursive_Task:")
        if self.Recursive_Task != []:
            for tasks in self.Recursive_Task:
                print(tasks)
        else: 
            print("None")

#@title Task Class {display-mode: "form"}
class okr_task():
    def __init__(self):
        self.Objective = ""
        self.KeyResults = {}

    def set_Objective(self,Objective):
        self.Objective = Objective
    def set_KeyResult(self,KeyResult):
        try:
            code = KeyResult.split("{")[0].split(":")[0]
            content = KeyResult.split("{")[0].split(":")[1]
            try: 
                a_task = task()
                deadline,time,difficulty = self.get_task_info(KeyResult)
                a_task.set_difficulty(difficulty)
                a_task.set_time(time)
                a_task.set_deadline(deadline)
                a_task.set_reward()
            except:
                print("task_set up failed: {} has wrong format".format(KeyResult))

            self.KeyResults[code] = [content,a_task]
            
        except:
            print("okr_task KeyResult set up failed, {} has wrong format".format(KeyResult))
            
    def __repr__(self):
        rep = self.Objective
        for k in self.KeyResults:
            rep += "\n"+ "\t"+ k + ":" + str(self.KeyResults[k][0])
        return rep

    def get_task_info(self,KeyResult):
        deadline = None
        time = None
        difficulty = None
        line = KeyResult
        temp = line.replace("}","").split("{")[-1].split(",")
        for i in temp:
            if i.split(":")[0].strip() == "deadline":
                deadline = i.split(":")[1].strip()
            elif i.split(":")[0].strip() == "time":
                time = i.split(":")[1].strip()
            elif i.split(":")[0].strip() == "difficulty":
                difficulty = i.split(":")[1].strip()
        return deadline,time,difficulty

class task():
    def __init__(self):
        self.difficulty = 0
        self.time = 0
        self.reward = 0
        self.completed = False
        self.deadline = None
        
    def set_deadline(self,deadline):
        self.deadline = deadline
    def set_time(self,time):
        self.time = time

    def set_difficulty(self,difficulty):
        self.difficulty = difficulty
    
    def complete(self):
        self.completed = True

    def set_reward(self):
        "Calculate Reward based on time and difficulty"
        try:
            time = abs(float(self.time))
            difficulty = abs(float(self.difficulty))
        except TypeError: 
            print("task has wrong format")
        time_lower_bound = 0.25
        time_upper_bound = 4
        difficulty_upper_bound = 10
        if time < time_lower_bound:
            time = time_lower_bound
        if time > time_upper_bound:
            time = time_upper_bound
        if difficulty > difficulty_upper_bound:
            difficulty = difficulty_upper_bound
        difficulty = abs(difficulty)
        reward = 3*(time**0.5*difficulty**0.5) + random.choice([-1,-0.5,0,0.5,1,1.5,2])
        self.reward = round(reward)

"""# Developer Quick Access"""

#@title Developer Switch {display-mode: "form"}
switch_on = False

#@title Quick Access of Server: Generates file and data {display-mode: "form"}
if switch_on:
    INfile = open("/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_accounts","rb")
    account_book = pickle.load(INfile)
    INfile.close()
    # Load GPK_update_log:
    INfile = open("/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_UpdateLog","rb")
    GPK_UpdateLog = pickle.load(INfile)
    INfile.close()
    #Load User 
    ACC = "18066060855"
    N = account_book[ACC]["N"]
    d = account_book[ACC]["d"]
    e = account_book[ACC]["e"]
    acc_enc = str(mod(int(ACC),e,N))
    acc_path = "/content/drive/Shared drives/GPK_OKR/GPK_Saves/" + acc_enc
    

    mail_info = account_book[ACC]["mail_info"]

    INfile = open( acc_path ,"rb")
    data = pickle.load(INfile)
    INfile.close()

    OUTfile = open("back_up","wb")
    pickle.dump(data,OUTfile)
    OUTfile.close()
    switch_on = False

#@title Quick Save {display-mode: "form"}
if switch_on:
    OUTfile = open("/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_accounts","wb")
    pickle.dump(account_book,OUTfile)
    OUTfile.close()

    OUTfile = open("/content/drive/Shared drives/GPK_OKR/GPK/GPK_files/GPK_UpdateLog","wb")
    pickle.dump(GPK_UpdateLog,OUTfile)
    OUTfile.close()

    OUTfile = open(acc_path,"wb")
    pickle.dump(data,OUTfile)
    OUTfile.close()

#@title Rewards Update {display-mode: "form"}
if switch_on:
    #Update Rewards
    LOG_Reward = []
    days = 0
    for dates in data["OKRLOG"]:
        days += 1
        for task in data["OKRLOG"][dates]:
            data["OKRLOG"][dates][task]["Reward"] = reward(float(data["OKRLOG"][dates][task]["task_time"]),float(data["OKRLOG"][dates][task]["task_difficulty"]))
            LOG_Reward.append(data["OKRLOG"][dates][task]["Reward"])
    print("OKRLOG rewards updated\n")

    #Update Recursive Bank Rewards
    for weekday in data["RecursiveBank"]:
        for task in data["RecursiveBank"][weekday]:
            data["RecursiveBank"][weekday][task]["Reward"] = reward(float(data["RecursiveBank"][weekday][task]["task_time"]),float(data["RecursiveBank"][weekday][task]["task_difficulty"]))
    print("RecursiveBank rewards updated\n")

    #Update Today's Tasks Rewards
    for task_type in data["TaskToday"]:
        if task_type != "Date":
            for task in data["TaskToday"][task_type]:
                data["TaskToday"][task_type][task]["Reward"] = reward(float(data["TaskToday"][task_type][task]["task_time"]),float(data["TaskToday"][task_type][task]["task_difficulty"]))
    print("TaskToday's rewards updated\n")

    star_print("Average Productivity:{}".format(sum(LOG_Reward)/days))

"""# Play_Ground"""

Test_Mode = False

if Test_Mode:
    GPK()