# -*- coding: utf-8 -*-
"""GPK_v0.75.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ZmjkBGYeefPAI5O6o3P0dt1YhSF_2ox

# Library
"""

import numpy as np
from IPython.display import clear_output
import random
from math import sqrt
from collections import namedtuple
import pickle
import smtplib
import matplotlib.pyplot as plt
import matplotlib.image as img
from math import *

"""# Pictures"""

#@title #menu pictures {display-mode: "form"}
menu_welcome_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_Welcome.png")
goodbye_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_goodbye.png")
welcome_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/OKR_Menu.png")
welldone_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_welldone.png")
checked_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Menu/GPK_green_check.png")

#@title #Store Pictures: Prize {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

def img_print(img_b):
    plt.imshow(img_b)
    plt.axis('off')
    plt.show()
    
#Store Pictures: Prize
Prize = {"P1":img.imread ("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P1.png"),
         "P2":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P2.png"),
         "P3":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P3.png"),
         "P4":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/GPK_P4.png"),
         "P5":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Prizes/better_luck.png")}
def img_Prize(n):
  Rank = "P"+str(n)
  img_print(Prize[Rank])

#@title Pictures: Cascino {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

#Store Pictures: Dice_Faces
diceFaces=[img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/U%2B2680.svg/200px-U%2B2680.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/U%2B2681.svg/200px-U%2B2681.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/U%2B2682.svg/200px-U%2B2682.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/U%2B2683.svg/200px-U%2B2683.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/U%2B2684.svg/200px-U%2B2684.svg.png"),
                   img.imread("https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/U%2B2685.svg/200px-U%2B2685.svg.png")]

Win_Lose = {"Win":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_Win.png"),
        "Lose":img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_Lose.png")}
Gamble_entry_img = img.imread("/content/drive/Shared drives/GPK_OKR/GPK_pics/Cascino/GPK_Gamble_Entry.png")

"""# RSA Encryption System"""

#@title Fundamental Module of RSA system {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

def Ecp(L):
    DICT = {"a":"01","b":"02","c":"03","d":"04","e":"05","f":"06","g":"07","h":"08","i":"09","j":"10","k":"11",
      "l":"12","m":"13","n":"14","o":"15","p":"16","q":"17","r":"18","s":"19","t":"20","u":"21","v":"22",
       "w":"23","x":"24","y":"25","z":"26"," ":"27",",":"28","!":"29",".":"30","?":"31",":":"32"}
    if L.isupper():
        L = str.lower(L)
    return DICT[str(L)]
    
#
def Decp(L):
    DICT = {"a":"01","b":"02","c":"03","d":"04","e":"05","f":"06","g":"07","h":"08","i":"09","j":"10","k":"11",
      "l":"12","m":"13","n":"14","o":"15","p":"16","q":"17","r":"18","s":"19","t":"20","u":"21","v":"22",
       "w":"23","x":"24","y":"25","z":"26"," ":"27",",":"28","!":"29",".":"30","?":"31",":":"32"}
    Items = list(DICT.items())
    for i in range(len(Items)):
        if str(L) == Items[i][1]:
            return Items[i][0]
    return(str.lower(random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ")))
#
def Encrptor(string):
    code = []
    for i in range(len(string)):
        code = np.append(code,Ecp(string[i]))
    return(code)

def Decrptor(string):
    message = []
    for i in range(len(string)):
        message = np.append(message,Decp(string[i]))
    return(message)   
#
def Concat (arr):
    output = "1"
    for i in range(len(arr)): 
        output = output + arr[i]
    return(int(output[1::]))

def translate(num):
    arr = []
    NUM = str((num))
    if len(NUM)%2 != 0:
        NUM = "0"+NUM
    N = int(len(NUM)/2)
    for i in range(N):
        arr = np.append(arr,NUM[2*i:2*i+2])
    return(arr)

def read(num_string):
    arr = translate(num_string)
    arr = Decrptor(arr)
    output = "~"
    for i in range(len(arr)): 
        output =  output + arr[i]
    return(str.capitalize(output[1::]))

def encode(plaintext):
    plaintext  = Encrptor(plaintext)
    return(Concat(plaintext))

#Credit to: https://medium.com/@prudywsh/how-to-generate-big-prime-numbers-miller-rabin-49e6e6af32fb
from random import randrange, getrandbits
def is_prime(n, k=128):
    """ Test if a number is prime
        Args:
            n -- int -- the number to test
            k -- int -- the number of tests to do
        return True if n is prime
    """
    # Test if n is not even.
    # But care, 2 is prime !
    if n == 2 or n == 3:
        return True
    if n <= 1 or n % 2 == 0:
        return False
    # find r and s
    s = 0
    r = n - 1
    while r & 1 == 0:
        s += 1
        r //= 2
    # do k tests
    for _ in range(k):
        a = randrange(2, n - 1)
        x = pow(a, r, n)
        if x != 1 and x != n - 1:
            j = 1
            while j < s and x != n - 1:
                x = pow(x, 2, n)
                if x == 1:
                    return False
                j += 1
            if x != n - 1:
                return False
    return True

# Module1: Prime Generator 
def isprime(N):
    if N % 2 == 0:
        return False
    for x in range(3,int(sqrt(N))+1,2):
        if N % x == 0:
            return False 
    return True

def num_gen(n):
    output = "0"
    num = np.random.randint(10, size=(1, n))
    num = num[0]
    for i in range(len(num)):
        output = output + str(num[i])
    output = output[1::]
    if output[0]== "0":
        output = str(np.random.randint(1,10))+output[1::]
    return(int(output)) 

def prime_gen(n):
    p = 4
    while 1*(is_prime(p))==0: 
        p = num_gen(n)
    return(p)    
    
#Gcd Module
def GCD(a,b):
    if a < b:
        temp_b = a
        temp_a = b
        a = temp_a 
        b = temp_b
    if a % b == 0:
        return(b)
    else: 
        return(GCD(b,a % b))
    
# Python program to demonstrate working of extended  
# Euclidean Algorithm  
     
# function for extended Euclidean Algorithm  
def gcdExtended(a, b):  
    # Base Case  
    if a == 0 :   
        return b, 0, 1
                 
    gcd, x1, y1 = gcdExtended(b%a, a)  
     
    # Update x and y using results of recursive  
    # call  
    x = y1 - (b//a) * x1  
    y = x1  
    return gcd, x, y 

# mod calculates (x**y%n)
def mod(x,y,n):
    p = 1
    s = x
    r = y
    while r > 0:
        if r % 2 == 1:
            p = p*s % n
        s = s*s % n 
        r = r // 2 
    return(p)

#RSA Module 
def get_e(n):
    for i in range(int(n)):
        i = i + 2
        if GCD(i,n)==1:
            return(i)
        
def get_mul_inv(e,phi):
    gcd, x, y = gcdExtended(e,phi)
    return(x%phi)

def RSA_sys(n):
    print("Generating Public Keys and Private Keys")
    #finds p,q that are two prime numbers with many digits 
    p = prime_gen(n)
    q = prime_gen(n)
    #Generate Public_key_1:N
    N = p*q
    phi = (p-1)*(q-1)
    #Generate Public_key_2:e
    e = get_e(phi)
    #Generate Private_key:d
    d = get_mul_inv(e,phi)
    return N,e,d

def ENC(message,N,e):
    m = encode(message)
    C = mod(encode(message),e,N)
    return(C)

def DEC(C,N,d):
    m = mod(C,d,N)
    return(read(m))

"""# GPK_Shell"""

#@title The shell that prompts login interface {display-mode: "form"}

# This code will be hidden when the notebook is loaded.

def GPK():
    Sv_default = "/content/drive/Shared drives/GPK_OKR/GPK_Saves/Sv1"
    STATUS = "Y"
    Black_list = []
    Q_default_server = input('Would you like to access the default server?("Y" or "N")\n')
    if Q_default_server == "Y":
      file_name = Sv_default
      INfile = open(file_name,"rb")
      file = pickle.load(INfile)
      BACK_UP = open("/content/drive/Shared drives/GPK_OKR/GPK_Saves/Sv_back_up","wb")
      pickle.dump(file,BACK_UP)
      BACK_UP.close()
    else:
      file_name = input("Please enter the file name you are accessing (hit enter to create a new one):\n"
              "PS: You can also copy and paste into the full file path\n"  )
      if file_name == "":
          file_name = input("Name the file:\n")
          OUTfile = open(file_name,"wb")
          file = ""
      else:
        INfile = open(file_name,"rb")
        file = pickle.load(INfile)
        BACK_UP = open("back_up","wb")
        pickle.dump(file,BACK_UP)
        BACK_UP.close()
    
    if file == "" :
        STATUS = input("WARNING! No content detected, would you like to continue?('Y' for Yes, 'N' for No)\n")
        if STATUS == "Y":
            print("empty file created")
            file = dict()
        else:
            return
    else:
        for i in list(file.items()):
            if i[0] != "Log":
                if i[1]["acc_status"] == 0:
                    Black_list.append(i[0])
            
    print("$Initialization complete$\n"
          "WELCOME to the Grand Peach King v0.7!\n"
          "Last update: 2020-8-12\n")
    welcome = "*** Welcome to the user menu, hit 'RETURN' to summon the main menu ***"
    star_print(welcome)
    while True: 
        cmd = str(input("Please enter command:\n"))
        if cmd == "Exit":
            print("*"*30)
            print("***Program Closed, goodbye~***")
            print("*"*30)
            OUTfile = open(file_name,"wb")
            pickle.dump(file,OUTfile)
            OUTfile.close()
            return
            
        if cmd == "":
            print("Menu:\n"
                  "Enter 'SignUp' to sign up for a new account.\n"
                  "Enter 'LogIn' to Login your account.\n"
                  "Enter 'GPKLOG' to show the update logs \n "
                  "Enter 'Exit' to terminate the program and autosave the file.\n")
        
        if cmd == "Admin":
            admin_PW = str(input("please enter your adminitrator pass word:\n"))
            if admin_PW == "13705165727":
                star_print("Welcome! Administrator!")
                cmd = input("please enter your admin command:\n")
                if cmd == "showmethemoney":
                  AC = input("who?")
                  file[AC]["OKR"]["balance"] += 666
                  img_print(img.imread("/content/drive/My Drive/GPK_pics/Menu/GPK_showmethemoney.png"))
                if cmd == "RetrievePassword":
                    AC = str(input("please enter your account of which you wish to retrive:"))
                    d = file[AC]["d"]
                    N = file[AC]["N"]
                    PW = mod(file[AC]["PW"],K.d,K.N)
                    print("The pass word is",PW)
                if cmd == "BlackList":
                    print(Black_list)
                    Q = input("Would you like to unlock specific accounts?(Y or N)")
                    while Q == "Y":
                        AC_unlock = input("Please enter the account you wish to unlock:")
                        Black_list.remove(AC_unlock)
                        file[AC_unlock]["acc_status"] = (1)
                        print("Account {} succesfully unlocked".format(AC_unlock))
                        Q = input("Would you like to continue?(Y or N)")
                if cmd == "BackUp":
                    BACK_UP = open("/content/drive/Shared drives/GPK_OKR/GPK_Saves/Sv_back_up","rb")
                    file = pickle.load(BACK_UP)
                    BACK_UP.close()
                    print("Back Up data retrieved")
                if cmd == "Log":
                    if "Log" not in file:
                        file["Log"] = dict()
                    from datetime import date
                    date_today = str(date.today())
                    if str(date_today) not in file["Log"]:
                        file["Log"][str(date_today)] = dict()
                    version = input("Version:\n")
                    entry = input("Update Log\n")
                    if version in file["Log"][str(date_today)]:
                        file["Log"][str(date_today)][version] = file["Log"][str(date_today)][version] + ("\n" + entry + "\n")
                    else:  
                        file["Log"][str(date_today)][version] = entry + "\n" 
                    
                    
        if cmd == "SignUp":
            N,e,d = RSA_sys(200)
            account = str(input("please enter your account:\n"))
            if account in file:
                print("Account already exist, enter 'LogIn' to login to your account.")
                continue
                
            password = int(input("please enter your pin:\n"))
            keys = {"N":N,"e":e,"d":d}
            name = str(input("please enter your name:\n"))
            gender = str(input("please enter your gender:\n"))
            mail_address = input("To automates with other applications, please enter an email address of yours.\n")
            mail_password = input("We also need your password of your email address.\n")
            mail_info = {"mail_address":mail_address,"mail_password":mail_password}
            file[account] = {"PW":mod(password,e,N),"N":N,"e":e,"d":d,"name":ENC(name,N,e),
                             "gender":ENC(gender,N,e),"Logs":[],"acc_status":1,"OKR":{},"mail_info":mail_info}
            print("Account generated and saved.")
            OUTfile = open(file_name,"wb")
            pickle.dump(file,OUTfile)
            OUTfile.close()
            
        if cmd == "OKRLOG":
            for date in file["Log"]:
                print(date)
                for version in file["Log"][date]:
                    print("  ",version)
                    log = str(file["Log"][date][version])
                    for i in log.split("\\n"):
                        print(i)
                
        if cmd == "LogIn":
            AC = str(input("please enter your account:\n"))
            if AC in Black_list:
                print("Account Locked for too many wrong trials.Contact administrator to unlock the account")
                OUTfile = open(file_name,"wb")
                pickle.dump(file,OUTfile)
                OUTfile.close()
                return
            if AC not in file:
              print("Such Account Does not Exit")
              continue
            trys = 3
            N = file[AC]["N"]
            e = file[AC]["e"]
            d = file[AC]["d"]
            while trys > 0:
                trys -= 1
                PW = int(input("please enter pass word:\n"))
                if file[AC]["PW"] == mod(PW,e,N):
                    trys = -1
                    first_entry = "Y"
                    while True:
                        if first_entry == "Y":
                            for i in range(10):
                              clear_output(wait=True)
                            img_print(menu_welcome_img)
                            star_print("hello,{},welcome back!".format(DEC(file[AC]["name"],N,d)))
                            first_entry = "N"
                        star_print("hit 'ENTER' to summon user Menu")
                        cmd = input("Dear user, please enter new commands:\n")
                        if cmd == "":
                            print("User Menu:\n"
                                  "Enter 'Name' to change name.\n"
                                  "Enter 'Save' to save data. \n"
                                  "Enter 'LogOut' to return to the main menu. \n"
                                  "Enter 'OKR' to Access OKR system \n")
                        if cmd == "Name":
                            name = input("Please enter your new name\n")
                            file[AC]["name"] = ENC(name,N,e)
                        if cmd == "OKR":
                          img_print(welcome_img)
                          file[AC]["OKR"] = OKR_system_user(file[AC]["OKR"],file[AC]["mail_info"])
                        if cmd == "Save":
                          OUTfile = open(file_name,"wb")
                          pickle.dump(file,OUTfile)
                          OUTfile.close()
                          img_print(checked_img)
                          print("File Succesfully Saved")
                        if cmd == "LogOut":
                            OUTfile = open(file_name,"wb")
                            pickle.dump(file,OUTfile)
                            OUTfile.close()
                            for i in range(10):
                              clear_output(wait=True)
                            print("File saved, account logged out...")
                            img_print(goodbye_img)
                            break
                else:
                    print("Wrong Password,%d trys left"%trys)
                    if trys == 0:
                        print("!!!Access Denied!!!")
                        Black_list.append(AC)
                        file[AC]["acc_status"] = 0
                        OUTfile = open(file_name,"wb")
                        pickle.dump(file,OUTfile)
                        OUTfile.close()
                        return
        star_print("Welcome to the USER menu, hit 'ENTER' to summon the main menu")

#@title Extra Shell Mods {display-mode: "form"}
def star_print(word):
  word = "*"*3 + str(word) + "*"*3
  print("*"*len(word))
  print(word)
  print("*"*len(word))

def draw_prob(days, p_fail = 0.1 , draws_per_day = 3 ):
  pr = 1 - exp(log(p_fail)/(draws_per_day*days))
  return(pr)

def reward(time,difficulty):
  if time < 1:
    time = 1
  if time > 4:
    time = 4
  if difficulty > 10:
    difficulty = 10
  difficulty = abs(difficulty)
  reward = time*difficulty
  return reward

"""# OKR_system"""

#@title OKR system that manages tasks {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def OKR_system_user(data,mail_info):
    from datetime import date
    if data == {}:
        data = {"TaskToday":{"Date":str(date.today()),"RecursiveTasks":{},"SpecialTasks":{}},"RecursiveBank":{},
                "OKRLOG_unfinished":{},"OKRLOG":{str(date.today()):{}},"balance":0,"Store":{},"MTK":{}}
    star_print("Welcome to OKR system!")
    #Initialize
    date_today = str(date.today())
    week_day = str(weekday_today())
    if data["TaskToday"]["Date"] != date_today:
      print("Updating Today's Tasks...")
      data["OKRLOG"][date_today] = {}
      data["OKRLOG_unfinished"].update(data["TaskToday"])
      data["TaskToday"]["RecursiveTasks"].clear()
      data["TaskToday"]["RecursiveTasks"].update(data["RecursiveBank"][week_day])
      data["TaskToday"]["Date"] = date_today
      img_print(checked_img)
      print("Today's Task Updated")
           
    Q = input("Would You like to see today's briefing?('Y' or 'N')\n")
    if Q == "Y":
        print("Your Balance is:",data["balance"])
        print("Today's Tasks are:")
        print("***Special Tasks***:")
        for i in data["TaskToday"]["SpecialTasks"]:
            print("**Task ID**:",i)
            print(data["TaskToday"]["SpecialTasks"][i])
        print("***Recurssive Tasks***:")
        for i in data["TaskToday"]["RecursiveTasks"]:
            print("**Task ID**:",i)
            print(data["TaskToday"]["RecursiveTasks"][i])
    # Main Functions:        
    while True:
        star_print("Hit 'ENTER' to summon the OKR_Main Menu")
        cmd = input("Please enter OKR commands:\n")
        if cmd == "":
          print("***OKR_Main Menu:***\n"
             "Enter 'TaskToday' to configure today's tasks\n"
             "Enter 'RecursiveBank' to configure Recursive Tasks\n"
             "Enter 'Store' to enter the store\n"
             "Enter 'MTK' to configure MeisterTask Synchronizations \n"
             "Enter 'Archive' to load the Archives \n"
             "Enter 'Return' to RETURN to the GPK Main Menu\n")
        if cmd == "Return":
            print("Your Balance is:",data["balance"])
            return (data)
        if cmd == "MTK":
          print("Your sender mail address is:",mail_info["mail_address"])
          R_address = input("What's the mail_address for your MTK Recursive Tasks Section?\n")
          data["MTK"]["R_address"] = R_address
          S_address = input("What's the mail_address for your MTK Special Tasks Section?\n")
          data["MTK"]["S_address"] = S_address
        if cmd == "Store":
            data = OKR_Store(data)
        if cmd == "RecursiveBank":
            while True:
                print("Hit 'ENTER' to summon the menu for RecursiveBank\n")
                cmd = input("How would you like to edit The RecursiveBank?")
                if cmd == "":
                  print("***RecursiveBank Menu***:\n"
                     "Enter 'Show' to show all the tasks in recursion\n"
                     "Enter 'Add' to add recursive task that recurs every day\n"
                     "Enter 'ClearAll' to empty the bank\n"
                     "Enter 'delete' omit specific task from the RecursiveBank\n")
                if cmd == "ClearAll":
                  Q = input("WARNING!Do you wish to clean the whole bank?('Y' or 'N')")
                  if Q == "Y":
                    data["RecursiveBank"].clear()

                if cmd == "Show":
                    print("RecursiveBank:")
                    for weekday in data["RecursiveBank"]:
                      print("****Weekday****:",weekday)
                      for ID in data["RecursiveBank"][weekday]:
                        print("***Task ID***:",ID)
                        print(data["RecursiveBank"][weekday][ID])
                if cmd == "Add":
                    R_w_d = input("Please enter the week dates that you wish this task to recur:\n"
                            "i.e: if you wish the task to recur on Monday and Sunday, enter '1,7'.\n" )     
                    ID = input("Please enter the ID for the task:\n")
                    task_name = input("Please enter the Name of the task:\n")
                    task_difficulty = int(input("Please enter the Difficulty of the task(from 1 to 10):\n"))
                    task_time = float(input("Please enter the estimated time of the task(in hours):\n"))
                    task_description = input("Finally,Please enter further descrition of the task if any.\n")
                    Reward = reward(task_time,task_difficulty)
                    R_w_d = R_w_d.split(",")
                    for i in R_w_d:
                      if i not in data["RecursiveBank"]:
                        data["RecursiveBank"][i] = {}
                      data["RecursiveBank"][i][ID] = {}
                      data["RecursiveBank"][i][ID]["Reward"] =  Reward
                      data["RecursiveBank"][i][ID]["task_name"] =  task_name
                      data["RecursiveBank"][i][ID]["task_difficulty"] =  task_difficulty
                      data["RecursiveBank"][i][ID]["task_time"] =  task_time
                      data["RecursiveBank"][i][ID]["task_description"] =  task_description
                      if i == str(weekday_today):
                        data["TaskToday"]["RecursiveTasks"][ID] = data["RecursiveBank"][i][ID]
                    
                if cmd == "Delete":
                    ID = input("Please enter the ID of the task that you wish to delete:\n")
                    for wd in data["RecursiveBank"]:
                      for id in data["RecursiveBank"][wd]:
                        if id == ID:
                          print(data["RecursiveBank"][wd][id])
                          Q = input("Are you sure that you wish to delete the task above?('Y' or 'N')\n")
                          if Q == "Y":
                            data["RecursiveBank"][wd].pop(ID)
                STATUS = input("Would you like to contine editing tasks?('Y' or 'N')\n")
                if STATUS == "N":
                    break
                    
        if cmd == "Archive":
            while True:
                star_print("Welcome to the Archive Menu")
                Log_type = input("Which type of Log would you like to observe?('F' for finished, 'UF' for unfinished)\n")
                while True:
                  if Log_type == "F":
                      print("Hit 'ENTER' to summon the Archive Menu:\n")
                      cmd = input("please enter archive commands:\n")
                      if cmd == "":
                        print("Archive Menu:\n"
                          "Enter 'ShowAll' to Show all the completed tasks in the log\n"
                          "Enter 'FindByDate' to find all completed tasks under a specific date\n"
                          "Enter 'Return' to return to the Archive Menu\n")
                      if cmd == "Return":
                        break
                      if cmd == "ShowAll":
                          for i in data["OKRLOG"]:
                              print("**Date**",i)
                              for j in data["OKRLOG"][i]:
                                print(data["OKRLOG"][i][j])
                      if cmd == "FindByDate":
                          Date = input("Please enter the Date you wish to locate")
                          for i in data["OKRLOG"][Date]:
                            print(data["OKRLOG"][Date][i])
                  elif Log_type == "UF":
                      print("Hit 'ENTER' to summon the Archive Menu:\n")
                      cmd = input("please enter archive commands:")
                      if cmd == "":
                        print("Archive Menu:\n"
                          "Enter 'ShowAll' to Show all the unfinished tasks in the log\n"
                          "Enter 'FindByDate' to find all unfinished tasks under a specific date\n"
                          "Enter 'Return' to return to the Archive Menu\n")
                      if cmd == "Return":
                        break
                      if cmd == "ShowAll":
                        for i in data["OKRLOG_unfinished"]:
                          print("**Date**",i)
                          for j in data["OKRLOG_unfinished"][i]:
                            print(data["OKRLOG_unfinished"][i][j])
                      if cmd == "FindByDate":
                        Date = input("Please enter the Date you wish to locate")
                        for i in data["OKRLOG_unfinished"][Date]:
                          print(data["OKRLOG_unfinished"][Date][i])
                STATUS = input("Would you like to contine?('Y' or 'N')")
                if STATUS == "N":
                        break
                        
        if cmd == "TaskToday":
            while True:
                star_print("Hit 'ENTER' to summon the menu for today's tasks")
                cmd = input("Please enter commands for Today's Task:\n")
                if cmd == "":
                  print("Menu for Today's Tasks: \n"
                     "Enter 'Balance' to check account balance \n"
                     "Enter 'show' to view all of today's tasks \n"
                     "Enter 'Complete' to complete specific tasks of today \n"
                     "Enter 'Edit' to modify today's tasks \n"
                     "Enter 'Return' to go back to OKR menu \n")
                if cmd == "Balance":
                    print(data["balance"])
                if cmd == "Return":
                    break
                    
                if cmd == "Show":
                    print("***Special Tasks***:")
                    for i in data["TaskToday"]["SpecialTasks"]:
                        print("**Task ID**:",i)
                        print(data["TaskToday"]["SpecialTasks"][i])
                    print("***Recurssive Tasks***:")
                    for i in data["TaskToday"]["RecursiveTasks"]:
                        print("**Task ID**:",i)
                        print(data["TaskToday"]["RecursiveTasks"][i])
                        
                if cmd == "Complete":
                    IDs = input("Congrats! Now, please enter the IDs of the task that you have finished:\n"
                           "if there are multiple tasks, be sure to seperate the IDs by a comma!!!\n ")
                    IDs = IDs.split(",")
                    for ID in IDs:
                        Category = ID[0]
                        if Category == "S":
                            if ID not in data["TaskToday"]["SpecialTasks"]:
                                print("Error,There is no task with ID{} in today's Special task".format(ID))
                                continue
                            print("For task",data["TaskToday"]["SpecialTasks"][ID]["task_name"])
                            time_update = input("How many hour does this task took you in actuality\n?")
                            data["TaskToday"]["SpecialTasks"][ID]["task_time"] = time_update
                            data["OKRLOG"][date_today][ID] = data["TaskToday"]["SpecialTasks"][ID]
                            data["balance"] += data["TaskToday"]["SpecialTasks"][ID]["Reward"]
                            img_print(welldone_img)
                            print("You Earned ${}!Your Current Balance is ${}".format(data["TaskToday"]["SpecialTasks"][ID]["Reward"],data["balance"]))
                            data["TaskToday"]["SpecialTasks"].pop(ID)
                        elif Category == "R":
                            if ID not in data["TaskToday"]["RecursiveTasks"]:
                                print("Error,There is no task with ID{} in today's Special task".format(ID))
                                continue
                            print("For task",data["TaskToday"]["RecursiveTasks"][ID]["task_name"])
                            time_update = input("How many hour does this task took you in actuality\n?")
                            data["TaskToday"]["RecursiveTasks"][ID]["task_time"] = time_update
                            data["OKRLOG"][date_today][ID] = data["TaskToday"]["RecursiveTasks"][ID]
                            data["balance"] += data["TaskToday"]["RecursiveTasks"][ID]["Reward"]
                            print("You Earned ${}!Your Current Balance is ${}".format(data["TaskToday"]["RecursiveTasks"][ID]["Reward"],data["balance"]))
                            img_print(welldone_img)
                            data["TaskToday"]["RecursiveTasks"].pop(ID)
                        else:
                            print("Invalid Syntax: ID category undistinguished")
                            continue
                    
                        
                if cmd == "Edit":
                    Type = input("Which Type of Class do you wish to edit?Enter 'S' for SPECIAl 'R' for Recursive.")
                    if Type == "S":
                        while True:
                            print("Hit 'ENTER' to summon menu for modifying tasks")
                            cmd = input("How would you like to edit Today's Special tasks?")
                            if cmd == "":
                              print("Task Menu: \n"
                                 "Enter 'Add' to add tasks\n"
                                 "Enter 'Delete' to delete tasks\n")
                            if cmd == "Add":
                                ID = input("Please enter the ID for the task:\n")
                                data["TaskToday"]["SpecialTasks"][ID] = {}
                                task_name = input("Please enter the Name of the task:\n")
                                task_difficulty = int(input("Please enter the Difficulty of the task(from 1 to 10):\n"))
                                task_time = float(input("Please enter the estimated time of the task(in hours):\n"))
                                task_description = input("Finally,Please enter further descrition of the task if any.\n")
                                Reward = reward(task_time,task_difficulty)
                                data["TaskToday"]["SpecialTasks"][ID]["Reward"] =  Reward
                                data["TaskToday"]["SpecialTasks"][ID]["task_name"] =  task_name
                                data["TaskToday"]["SpecialTasks"][ID]["task_difficulty"] =  task_difficulty
                                data["TaskToday"]["SpecialTasks"][ID]["task_time"] =  task_time
                                data["TaskToday"]["SpecialTasks"][ID]["task_description"] =  task_description
                                if data["MTK"]!={}:
                                  Q = input("Would you like to synchronize w/ MeisterTask?('Y' or 'N')\n")
                                  if Q == "Y":
                                    gmail_user = mail_info["mail_address"]
                                    gmail_password = mail_info["mail_password"]
                                    Receipeints_list = [data["MTK"]["S_address"]]
                                    body = "ID:{}\n\nInfo:{}".format(ID,str(data["TaskToday"]["SpecialTasks"][ID]))
                                    msg = Msg_Editor(task_name,body)
                                    Mail_Send(gmail_user,gmail_password,Receipeints_list,msg)
                                    print("-Task Synchronized-")
                            if cmd == "Delete":
                                ID = input("Please enter the ID of the task that you wish to delete:\n")
                                print(data["TaskToday"]["SpecialTasks"][ID])
                                Q = input("Are you sure that you wish to delete the task above?('Y' or 'N')\n")
                                if Q == "Y":
                                    data["TaskToday"]["SpecialTasks"].pop(ID)
                            STATUS = input("Would you like to contine editing tasks?('Y' or 'N')\n")
                            if STATUS == "N":
                                break
                    if Type == "R":
                        while True:
                            print("Hit 'ENTER' to summon menu for modifying tasks")
                            cmd = input("How would you like to edit Today's Recursive tasks?\n")
                            if cmd == "":
                              print("Task Menu: \n"
                                 "Enter 'Add' to add tasks\n"
                                 "Enter 'Delete' to delete tasks\n")
                            if cmd == "Add":
                                ID = input("Please enter the ID for the task:\n")
                                data["TaskToday"]["RecursiveTasks"][ID] = {}
                                for wkd in data["RecursiveBank"]:
                                  for id in  data["RecursiveBank"][wkd]:
                                    if id == ID:
                                      data["TaskToday"]["RecursiveTasks"][ID].update(data["RecursiveBank"][wkd][ID])
                                      break                                
                                if data["MTK"]!={}:
                                  Q = input("Would you like to synchronize w/ MeisterTask?('Y' or 'N')")
                                  if Q == "Y":
                                    gmail_user = mail_info["mail_address"]
                                    gmail_password = mail_info["mail_password"]
                                    Receipeints_list = [data["MTK"]["R_address"]]
                                    task_name = data["TaskToday"]["RecursiveTasks"][ID]["task_name"]
                                    body = "ID:{}\n\nInfo:{}".format(ID,str(data["TaskToday"]["RecursiveTasks"][ID]))
                                    msg = Msg_Editor(task_name,body)
                                    Mail_Send(gmail_user,gmail_password,Receipeints_list,msg)
                                    print("-Task Synchronized-")
                            if cmd == "Delete":
                                ID = input("Please enter the ID of the task that you wish to delete:\n")
                                print(data["TaskToday"]["RecursiveTasks"][ID])
                                Q = input("Are you sure that you wish to delete the task above?('Y' or 'N')\n")
                                if Q == "Y":
                                    data["TaskToday"]["RecursiveTasks"].pop(ID)
                            STATUS = input("Would you like to contine editing tasks?('Y' or 'N')\n")
                            if STATUS == "N":
                                break

#@title Date aquisition module {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
# Week Day
def weekday_today():
  from datetime import date
  import datetime
  year = int(str(date.today()).split("-")[0])
  month = int(str(date.today()).split("-")[1])
  day = int(str(date.today()).split("-")[2])
  return(datetime.date(year, month, day).isocalendar()[2])

"""#OKR Store"""

#@title OKR Store interface {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def OKR_Store(data):
    star_print("Welcome to the OKR_Store! Your Balance is:{}. Hit 'ENTER' to summon store menu.".format(data["balance"]))
    while True:
        star_print("Your Balance is:{}.Hit 'ENTER' to summon store menu.".format(data["balance"]))
        cmd = input("What would you like to do in the OKR_store?")
        
        if cmd == "Gamble": 
          img_print(Gamble_entry_img)
          print("Welcome to The Cascino! Hit 'ENTER' to see the games")
          while True:
            cmd = input("[CASCINO] Hello young money! How would you like to make use of your money?\n"
             "Hit 'ENTER' to summon Menu")
            if cmd == "":
              print("Cascino menu:\n"
                "Enter 'BoS' to play dice roll game\n"
                "Enter 'Return' to return to the store\n")
            if cmd == "Return":
              print("Returning to the menu")
              break
            if cmd == "BoS":
              print("Welcome to the Dice roll! The rule is simple:\n"
                  "The house will throw two dices and you guess if the Sum of two dice is either\n"
                  "BIG or small \n"
                  "Get it? Let's ROLL!!!")
              while True:
                bet = input("So, Big or Small? ('B' or 'S')")
                money_bet = int(input("How much would you like to bet? $50 is the maximum"))
                if data["balance"] - money_bet < 0:
                  print("Sorry,you cant afford this. Your current balance is:",data["balance"])
                  break
                data["balance"] += B_or_s(bet,money_bet)
                print("Your balance now is:",data["balance"])
                Q = input("Would you like to continue the game?('Y' or 'N')")
                if Q == "N":
                  break
        elif cmd == "Buy":
          while True:
            print("[BUY] Lucky Draws:\n"
              "***Draw Once*** Price:$25 Item_code:  D1 \n"
              "*Open a Pack* Price:$100 Item_code:  P1 \n"
              "*Pack_of_Five** Price:$400 Item_code:  P5 \n"
              "Each pack contain 5 draws! The more you buy, the cheaper each draw cost!\n"
              "Enter 'Return' to return to menu\n")
            Option = input("Please Enter Item_code to make a purchase~")
            if Option == "P1":
              if data["balance"] >= 100:
                data["balance"] -= 100
                print(Draw(5))
              else:
                print("Sorry, You can not afford this!")
            elif Option == "D1":
              if data["balance"] >= 25:
                data["balance"] -= 25
                print(Draw(1))
              else:
                print("Sorry, You can not afford this!")
            elif Option == "P5":
              if data["balance"] >= 400:
                data["balance"] -= 400
                print(Draw(25))
              else:
                print("Sorry, You can not afford this!")
            if Option == "Return":
              print("Returning to the menu")
              break
        elif cmd == "Return":
            return data
        else: 
          print("Store Menu: \n"
             "Enter 'Buy' to purchase an item\n"
             "Enter 'Gamble' to test your Luck!\n"
             "Enter 'Return' to return to the OKR system\n")

#@title Rewards Mod {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def Draw(n,p1=draw_prob(90),p2=draw_prob(30),p3=draw_prob(7),p4=draw_prob(3)):
    for i in range(int(n)):
        odd = random.random()
        if odd < p1:
            print("OMG!!!You Won the TOP Prize!!!")
            img_Prize(1)
            continue
        elif odd < p2:
            print("The Grand Prize is Yours! Amazing!!")
            img_Prize(2)
            continue
        elif odd < p3:
            print("You had your self a good deal!")
            img_Prize(3)
            continue
        elif odd < p4:
            print("Not bad, not bad at all!")
            img_Prize(4)
            continue
        else: 
            print("Sorry,Please try again")
            img_Prize(5)

p1=draw_prob(90)
p2=draw_prob(30)
p3=draw_prob(7)
p4=draw_prob(3)
print(p1,p2,p3,p4)

#@title Casino Mod {display-mode: "form"}

# This code will be hidden when the notebook is loaded.
def double_dice_roll():
  r1 = np.random.choice(range(1,7))
  r2 = np.random.choice(range(1,7))
  plt.figure(figsize=(2,1))
  plt.subplot(1,2,1)
  plt.imshow(diceFaces[r1-1])
  plt.axis('off')
  plt.subplot(1,2,2)
  plt.imshow(diceFaces[r2-1])
  plt.axis('off')
  plt.show()
  return (r1+r2)

def B_or_s(guess,bet):
  if int(bet) > 50:
    bet = 50
  else:
    bet = abs(bet)
    
  small = range(1,7)
  Big = range(8,13)
  roll = double_dice_roll()
  if guess == "B":
    if roll in Big:
      img_print(Win_Lose["Win"])
      return (bet)
    else:
      img_print(Win_Lose["Lose"])
      return (-bet)
  else:
    if roll in small:
      img_print(Win_Lose["Win"])
      return (bet)
    else:
      img_print(Win_Lose["Lose"])
      return (-bet)

"""# Gmail_Module"""

#@title Gmail Communication Mod {display-mode: "form"}
def Msg_Editor(mail_subject,mail_body,tail="-Sent From Colab, Powered by Python"):
  body = mail_body + "\n\n" + tail
  message = "Subject:{}\n\n{}".format(mail_subject,body)
  return(message)

def Mail_Send(gmail_user,gmail_password,Receipeints_list,msg):
  msg = "From:{}\nTo:{}\n".format(gmail_user,Receipeints_list[0])+ msg
  try:
    server = smtplib.SMTP_SSL('smtp.gmail.com:465')
    server.ehlo()
    server.login(gmail_user, gmail_password)
    server.sendmail(gmail_user, Receipeints_list , msg)
    server.close()

    print ('Email sent!')
  except:
    print ('Something went wrong...')

"""# Developer Quick Access"""

#@title Quick Access of Server: Generates file and data {display-mode: "form"}
path = "/content/drive/Shared drives/GPK_OKR/GPK_Saves/Sv1"
INfile = open(path,"rb")
file = pickle.load(INfile)
data = file["18066060855"]["OKR"]
mail_info = file["18066060855"]["mail_info"]

#@title Quick Save {display-mode: "form"}
OUTfile = open(path,"wb")
pickle.dump(file,OUTfile)
OUTfile.close()